// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"fmt"
	"jamf/internal/sdk/pkg/models/shared"
	"jamf/internal/sdk/pkg/utils"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://yourServer.jamfcloud.com/JSSResource",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

type sdkConfiguration struct {
	DefaultClient     HTTPClient
	SecurityClient    HTTPClient
	Security          *shared.Security
	ServerURL         string
	ServerIndex       int
	Language          string
	OpenAPIDocVersion string
	SDKVersion        string
	GenVersion        string
}

func (c *sdkConfiguration) GetServerDetails() (string, map[string]string) {
	if c.ServerURL != "" {
		return c.ServerURL, nil
	}

	return ServerList[c.ServerIndex], nil
}

// Jamf
type Jamf struct {
	Accounts                          *accounts
	Activationcode                    *activationcode
	Advancedcomputersearches          *advancedcomputersearches
	Advancedmobiledevicesearches      *advancedmobiledevicesearches
	Advancedusersearches              *advancedusersearches
	Allowedfileextensions             *allowedfileextensions
	Buildings                         *buildings
	Byoprofiles                       *byoprofiles
	Categories                        *categories
	Classes                           *classes
	Commandflush                      *commandflush
	Computerapplications              *computerapplications
	Computerapplicationusage          *computerapplicationusage
	Computercheckin                   *computercheckin
	Computercommands                  *computercommands
	Computerextensionattributes       *computerextensionattributes
	Computergroups                    *computergroups
	Computerhardwaresoftwarereports   *computerhardwaresoftwarereports
	Computerhistory                   *computerhistory
	Computerinventorycollection       *computerinventorycollection
	Computerinvitations               *computerinvitations
	Computermanagement                *computermanagement
	Computerreports                   *computerreports
	Computers                         *computers
	Departments                       *departments
	Directorybindings                 *directorybindings
	Diskencryptionconfigurations      *diskencryptionconfigurations
	Distributionpoints                *distributionpoints
	Dockitems                         *dockitems
	Ebooks                            *ebooks
	Fileuploads                       *fileuploads
	Gsxconnection                     *gsxconnection
	Healthcarelistener                *healthcarelistener
	Healthcarelistenerrule            *healthcarelistenerrule
	Ibeacons                          *ibeacons
	Infrastructuremanager             *infrastructuremanager
	Jsonwebtokenconfigurations        *jsonwebtokenconfigurations
	Jssuser                           *jssuser
	Ldapservers                       *ldapservers
	Licensedsoftware                  *licensedsoftware
	Logflush                          *logflush
	Macapplications                   *macapplications
	Managedpreferenceprofiles         *managedpreferenceprofiles
	Mobiledeviceapplications          *mobiledeviceapplications
	Mobiledevicecommands              *mobiledevicecommands
	Mobiledeviceconfigurationprofiles *mobiledeviceconfigurationprofiles
	Mobiledeviceenrollmentprofiles    *mobiledeviceenrollmentprofiles
	Mobiledeviceextensionattributes   *mobiledeviceextensionattributes
	Mobiledevicegroups                *mobiledevicegroups
	Mobiledevicehistory               *mobiledevicehistory
	Mobiledeviceinvitations           *mobiledeviceinvitations
	Mobiledeviceprovisioningprofiles  *mobiledeviceprovisioningprofiles
	Mobiledevices                     *mobiledevices
	Networksegments                   *networksegments
	Osxconfigurationprofiles          *osxconfigurationprofiles
	Packages                          *packages
	Patchavailabletitles              *patchavailabletitles
	Patches                           *patches
	Patchexternalsources              *patchexternalsources
	Patchinternalsources              *patchinternalsources
	Patchpolicies                     *patchpolicies
	Patchreports                      *patchreports
	Patchsoftwaretitles               *patchsoftwaretitles
	Peripherals                       *peripherals
	Peripheraltypes                   *peripheraltypes
	Policies                          *policies
	Printers                          *printers
	Removablemacaddresses             *removablemacaddresses
	Restrictedsoftware                *restrictedsoftware
	Savedsearches                     *savedsearches
	Scripts                           *scripts
	Sites                             *sites
	Smtpserver                        *smtpserver
	Softwareupdateservers             *softwareupdateservers
	Userextensionattributes           *userextensionattributes
	Usergroups                        *usergroups
	Users                             *users
	Vppaccounts                       *vppaccounts
	Vppassignments                    *vppassignments
	Vppinvitations                    *vppinvitations
	Webhooks                          *webhooks

	sdkConfiguration sdkConfiguration
}

type SDKOption func(*Jamf)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *Jamf) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *Jamf) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServerIndex allows the overriding of the default server by index
func WithServerIndex(serverIndex int) SDKOption {
	return func(sdk *Jamf) {
		if serverIndex < 0 || serverIndex >= len(ServerList) {
			panic(fmt.Errorf("server index %d out of range", serverIndex))
		}

		sdk.sdkConfiguration.ServerIndex = serverIndex
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *Jamf) {
		sdk.sdkConfiguration.DefaultClient = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security shared.Security) SDKOption {
	return func(sdk *Jamf) {
		sdk.sdkConfiguration.Security = &security
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *Jamf {
	sdk := &Jamf{
		sdkConfiguration: sdkConfiguration{
			Language:          "terraform",
			OpenAPIDocVersion: "10.48.0",
			SDKVersion:        "1.0.0",
			GenVersion:        "2.65.0",
		},
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.DefaultClient == nil {
		sdk.sdkConfiguration.DefaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk.sdkConfiguration.SecurityClient == nil {
		if sdk.sdkConfiguration.Security != nil {
			sdk.sdkConfiguration.SecurityClient = utils.ConfigureSecurityClient(sdk.sdkConfiguration.DefaultClient, sdk.sdkConfiguration.Security)
		} else {
			sdk.sdkConfiguration.SecurityClient = sdk.sdkConfiguration.DefaultClient
		}
	}

	sdk.Accounts = newAccounts(sdk.sdkConfiguration)

	sdk.Activationcode = newActivationcode(sdk.sdkConfiguration)

	sdk.Advancedcomputersearches = newAdvancedcomputersearches(sdk.sdkConfiguration)

	sdk.Advancedmobiledevicesearches = newAdvancedmobiledevicesearches(sdk.sdkConfiguration)

	sdk.Advancedusersearches = newAdvancedusersearches(sdk.sdkConfiguration)

	sdk.Allowedfileextensions = newAllowedfileextensions(sdk.sdkConfiguration)

	sdk.Buildings = newBuildings(sdk.sdkConfiguration)

	sdk.Byoprofiles = newByoprofiles(sdk.sdkConfiguration)

	sdk.Categories = newCategories(sdk.sdkConfiguration)

	sdk.Classes = newClasses(sdk.sdkConfiguration)

	sdk.Commandflush = newCommandflush(sdk.sdkConfiguration)

	sdk.Computerapplications = newComputerapplications(sdk.sdkConfiguration)

	sdk.Computerapplicationusage = newComputerapplicationusage(sdk.sdkConfiguration)

	sdk.Computercheckin = newComputercheckin(sdk.sdkConfiguration)

	sdk.Computercommands = newComputercommands(sdk.sdkConfiguration)

	sdk.Computerextensionattributes = newComputerextensionattributes(sdk.sdkConfiguration)

	sdk.Computergroups = newComputergroups(sdk.sdkConfiguration)

	sdk.Computerhardwaresoftwarereports = newComputerhardwaresoftwarereports(sdk.sdkConfiguration)

	sdk.Computerhistory = newComputerhistory(sdk.sdkConfiguration)

	sdk.Computerinventorycollection = newComputerinventorycollection(sdk.sdkConfiguration)

	sdk.Computerinvitations = newComputerinvitations(sdk.sdkConfiguration)

	sdk.Computermanagement = newComputermanagement(sdk.sdkConfiguration)

	sdk.Computerreports = newComputerreports(sdk.sdkConfiguration)

	sdk.Computers = newComputers(sdk.sdkConfiguration)

	sdk.Departments = newDepartments(sdk.sdkConfiguration)

	sdk.Directorybindings = newDirectorybindings(sdk.sdkConfiguration)

	sdk.Diskencryptionconfigurations = newDiskencryptionconfigurations(sdk.sdkConfiguration)

	sdk.Distributionpoints = newDistributionpoints(sdk.sdkConfiguration)

	sdk.Dockitems = newDockitems(sdk.sdkConfiguration)

	sdk.Ebooks = newEbooks(sdk.sdkConfiguration)

	sdk.Fileuploads = newFileuploads(sdk.sdkConfiguration)

	sdk.Gsxconnection = newGsxconnection(sdk.sdkConfiguration)

	sdk.Healthcarelistener = newHealthcarelistener(sdk.sdkConfiguration)

	sdk.Healthcarelistenerrule = newHealthcarelistenerrule(sdk.sdkConfiguration)

	sdk.Ibeacons = newIbeacons(sdk.sdkConfiguration)

	sdk.Infrastructuremanager = newInfrastructuremanager(sdk.sdkConfiguration)

	sdk.Jsonwebtokenconfigurations = newJsonwebtokenconfigurations(sdk.sdkConfiguration)

	sdk.Jssuser = newJssuser(sdk.sdkConfiguration)

	sdk.Ldapservers = newLdapservers(sdk.sdkConfiguration)

	sdk.Licensedsoftware = newLicensedsoftware(sdk.sdkConfiguration)

	sdk.Logflush = newLogflush(sdk.sdkConfiguration)

	sdk.Macapplications = newMacapplications(sdk.sdkConfiguration)

	sdk.Managedpreferenceprofiles = newManagedpreferenceprofiles(sdk.sdkConfiguration)

	sdk.Mobiledeviceapplications = newMobiledeviceapplications(sdk.sdkConfiguration)

	sdk.Mobiledevicecommands = newMobiledevicecommands(sdk.sdkConfiguration)

	sdk.Mobiledeviceconfigurationprofiles = newMobiledeviceconfigurationprofiles(sdk.sdkConfiguration)

	sdk.Mobiledeviceenrollmentprofiles = newMobiledeviceenrollmentprofiles(sdk.sdkConfiguration)

	sdk.Mobiledeviceextensionattributes = newMobiledeviceextensionattributes(sdk.sdkConfiguration)

	sdk.Mobiledevicegroups = newMobiledevicegroups(sdk.sdkConfiguration)

	sdk.Mobiledevicehistory = newMobiledevicehistory(sdk.sdkConfiguration)

	sdk.Mobiledeviceinvitations = newMobiledeviceinvitations(sdk.sdkConfiguration)

	sdk.Mobiledeviceprovisioningprofiles = newMobiledeviceprovisioningprofiles(sdk.sdkConfiguration)

	sdk.Mobiledevices = newMobiledevices(sdk.sdkConfiguration)

	sdk.Networksegments = newNetworksegments(sdk.sdkConfiguration)

	sdk.Osxconfigurationprofiles = newOsxconfigurationprofiles(sdk.sdkConfiguration)

	sdk.Packages = newPackages(sdk.sdkConfiguration)

	sdk.Patchavailabletitles = newPatchavailabletitles(sdk.sdkConfiguration)

	sdk.Patches = newPatches(sdk.sdkConfiguration)

	sdk.Patchexternalsources = newPatchexternalsources(sdk.sdkConfiguration)

	sdk.Patchinternalsources = newPatchinternalsources(sdk.sdkConfiguration)

	sdk.Patchpolicies = newPatchpolicies(sdk.sdkConfiguration)

	sdk.Patchreports = newPatchreports(sdk.sdkConfiguration)

	sdk.Patchsoftwaretitles = newPatchsoftwaretitles(sdk.sdkConfiguration)

	sdk.Peripherals = newPeripherals(sdk.sdkConfiguration)

	sdk.Peripheraltypes = newPeripheraltypes(sdk.sdkConfiguration)

	sdk.Policies = newPolicies(sdk.sdkConfiguration)

	sdk.Printers = newPrinters(sdk.sdkConfiguration)

	sdk.Removablemacaddresses = newRemovablemacaddresses(sdk.sdkConfiguration)

	sdk.Restrictedsoftware = newRestrictedsoftware(sdk.sdkConfiguration)

	sdk.Savedsearches = newSavedsearches(sdk.sdkConfiguration)

	sdk.Scripts = newScripts(sdk.sdkConfiguration)

	sdk.Sites = newSites(sdk.sdkConfiguration)

	sdk.Smtpserver = newSmtpserver(sdk.sdkConfiguration)

	sdk.Softwareupdateservers = newSoftwareupdateservers(sdk.sdkConfiguration)

	sdk.Userextensionattributes = newUserextensionattributes(sdk.sdkConfiguration)

	sdk.Usergroups = newUsergroups(sdk.sdkConfiguration)

	sdk.Users = newUsers(sdk.sdkConfiguration)

	sdk.Vppaccounts = newVppaccounts(sdk.sdkConfiguration)

	sdk.Vppassignments = newVppassignments(sdk.sdkConfiguration)

	sdk.Vppinvitations = newVppinvitations(sdk.sdkConfiguration)

	sdk.Webhooks = newWebhooks(sdk.sdkConfiguration)

	return sdk
}
