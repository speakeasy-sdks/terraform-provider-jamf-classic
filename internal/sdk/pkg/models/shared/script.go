// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ScriptParameters struct {
	Parameter10 *string `json:"parameter10,omitempty"`
	Parameter11 *string `json:"parameter11,omitempty"`
	Parameter4  *string `json:"parameter4,omitempty"`
	Parameter5  *string `json:"parameter5,omitempty"`
	Parameter6  *string `json:"parameter6,omitempty"`
	Parameter7  *string `json:"parameter7,omitempty"`
	Parameter8  *string `json:"parameter8,omitempty"`
	Parameter9  *string `json:"parameter9,omitempty"`
}

type ScriptPriority string

const (
	ScriptPriorityBefore   ScriptPriority = "Before"
	ScriptPriorityAfter    ScriptPriority = "After"
	ScriptPriorityAtReboot ScriptPriority = "At Reboot"
)

func (e ScriptPriority) ToPointer() *ScriptPriority {
	return &e
}

func (e *ScriptPriority) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Before":
		fallthrough
	case "After":
		fallthrough
	case "At Reboot":
		*e = ScriptPriority(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScriptPriority: %v", v)
	}
}

// Script - OK
type Script struct {
	Category *string `json:"category,omitempty"`
	Filename *string `json:"filename,omitempty"`
	ID       *int64  `json:"id,omitempty"`
	Info     *string `json:"info,omitempty"`
	// Name of the script
	Name                  string            `json:"name"`
	Notes                 *string           `json:"notes,omitempty"`
	OsRequirements        *string           `json:"os_requirements,omitempty"`
	Parameters            *ScriptParameters `json:"parameters,omitempty"`
	Priority              *ScriptPriority   `json:"priority,omitempty"`
	ScriptContents        *string           `json:"script_contents,omitempty"`
	ScriptContentsEncoded *string           `json:"script_contents_encoded,omitempty"`
}
