// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LdapServerConnectionAccount struct {
	DistinguishedUsername *string `json:"distinguished_username,omitempty"`
	Password              *string `json:"password,omitempty"`
}

type LdapServerConnectionAuthenticationType string

const (
	LdapServerConnectionAuthenticationTypeSimple    LdapServerConnectionAuthenticationType = "simple"
	LdapServerConnectionAuthenticationTypeCramMd5   LdapServerConnectionAuthenticationType = "CRAM-MD5"
	LdapServerConnectionAuthenticationTypeDigestMd5 LdapServerConnectionAuthenticationType = "DIGEST-MD5"
	LdapServerConnectionAuthenticationTypeNone      LdapServerConnectionAuthenticationType = "none"
)

func (e LdapServerConnectionAuthenticationType) ToPointer() *LdapServerConnectionAuthenticationType {
	return &e
}

func (e *LdapServerConnectionAuthenticationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "simple":
		fallthrough
	case "CRAM-MD5":
		fallthrough
	case "DIGEST-MD5":
		fallthrough
	case "none":
		*e = LdapServerConnectionAuthenticationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LdapServerConnectionAuthenticationType: %v", v)
	}
}

type LdapServerConnectionReferralResponse string

const (
	LdapServerConnectionReferralResponseIgnore LdapServerConnectionReferralResponse = "ignore"
	LdapServerConnectionReferralResponseFollow LdapServerConnectionReferralResponse = "follow"
)

func (e LdapServerConnectionReferralResponse) ToPointer() *LdapServerConnectionReferralResponse {
	return &e
}

func (e *LdapServerConnectionReferralResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ignore":
		fallthrough
	case "follow":
		*e = LdapServerConnectionReferralResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LdapServerConnectionReferralResponse: %v", v)
	}
}

type LdapServerConnectionServerType string

const (
	LdapServerConnectionServerTypeActiveDirectory LdapServerConnectionServerType = "Active Directory"
	LdapServerConnectionServerTypeOpenDirectory   LdapServerConnectionServerType = "Open Directory"
	LdapServerConnectionServerTypeEDirectory      LdapServerConnectionServerType = "eDirectory"
	LdapServerConnectionServerTypeCustom          LdapServerConnectionServerType = "Custom"
)

func (e LdapServerConnectionServerType) ToPointer() *LdapServerConnectionServerType {
	return &e
}

func (e *LdapServerConnectionServerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Active Directory":
		fallthrough
	case "Open Directory":
		fallthrough
	case "eDirectory":
		fallthrough
	case "Custom":
		*e = LdapServerConnectionServerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LdapServerConnectionServerType: %v", v)
	}
}

type LdapServerConnection struct {
	Account            *LdapServerConnectionAccount            `json:"account,omitempty"`
	AuthenticationType *LdapServerConnectionAuthenticationType `json:"authentication_type,omitempty"`
	// Hostname or IP address of the server
	Hostname *string `json:"hostname,omitempty"`
	ID       *int64  `json:"id,omitempty"`
	// Name of the LDAP server
	Name string `json:"name"`
	// Timeout in seconds
	OpenCloseTimeout *int64                                `json:"open_close_timeout,omitempty"`
	Port             *int64                                `json:"port,omitempty"`
	ReferralResponse *LdapServerConnectionReferralResponse `json:"referral_response,omitempty"`
	// Timeout in seconds
	SearchTimeout *int64                          `json:"search_timeout,omitempty"`
	ServerType    *LdapServerConnectionServerType `json:"server_type,omitempty"`
	UseSsl        *bool                           `json:"use_ssl,omitempty"`
	UseWildcards  *bool                           `json:"use_wildcards,omitempty"`
}

type LdapServerMappingsForUsersUserGroupMappingsMapObjectClassToAnyOrAll string

const (
	LdapServerMappingsForUsersUserGroupMappingsMapObjectClassToAnyOrAllAll LdapServerMappingsForUsersUserGroupMappingsMapObjectClassToAnyOrAll = "all"
	LdapServerMappingsForUsersUserGroupMappingsMapObjectClassToAnyOrAllAny LdapServerMappingsForUsersUserGroupMappingsMapObjectClassToAnyOrAll = "any"
)

func (e LdapServerMappingsForUsersUserGroupMappingsMapObjectClassToAnyOrAll) ToPointer() *LdapServerMappingsForUsersUserGroupMappingsMapObjectClassToAnyOrAll {
	return &e
}

func (e *LdapServerMappingsForUsersUserGroupMappingsMapObjectClassToAnyOrAll) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "any":
		*e = LdapServerMappingsForUsersUserGroupMappingsMapObjectClassToAnyOrAll(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LdapServerMappingsForUsersUserGroupMappingsMapObjectClassToAnyOrAll: %v", v)
	}
}

type LdapServerMappingsForUsersUserGroupMappingsSearchScope string

const (
	LdapServerMappingsForUsersUserGroupMappingsSearchScopeAllSubtrees    LdapServerMappingsForUsersUserGroupMappingsSearchScope = "All Subtrees"
	LdapServerMappingsForUsersUserGroupMappingsSearchScopeFirstLevelOnly LdapServerMappingsForUsersUserGroupMappingsSearchScope = "First Level Only"
)

func (e LdapServerMappingsForUsersUserGroupMappingsSearchScope) ToPointer() *LdapServerMappingsForUsersUserGroupMappingsSearchScope {
	return &e
}

func (e *LdapServerMappingsForUsersUserGroupMappingsSearchScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "All Subtrees":
		fallthrough
	case "First Level Only":
		*e = LdapServerMappingsForUsersUserGroupMappingsSearchScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LdapServerMappingsForUsersUserGroupMappingsSearchScope: %v", v)
	}
}

type LdapServerMappingsForUsersUserGroupMappings struct {
	MapGroupID               *string                                                              `json:"map_group_id,omitempty"`
	MapGroupName             *string                                                              `json:"map_group_name,omitempty"`
	MapGroupUUID             *string                                                              `json:"map_group_uuid,omitempty"`
	MapObjectClassToAnyOrAll *LdapServerMappingsForUsersUserGroupMappingsMapObjectClassToAnyOrAll `json:"map_object_class_to_any_or_all,omitempty"`
	ObjectClasses            *string                                                              `json:"object_classes,omitempty"`
	SearchBase               *string                                                              `json:"search_base,omitempty"`
	SearchScope              *LdapServerMappingsForUsersUserGroupMappingsSearchScope              `json:"search_scope,omitempty"`
}

type LdapServerMappingsForUsersUserGroupMembershipMappingsMapObjectClassToAnyOrAll string

const (
	LdapServerMappingsForUsersUserGroupMembershipMappingsMapObjectClassToAnyOrAllAll LdapServerMappingsForUsersUserGroupMembershipMappingsMapObjectClassToAnyOrAll = "all"
	LdapServerMappingsForUsersUserGroupMembershipMappingsMapObjectClassToAnyOrAllAny LdapServerMappingsForUsersUserGroupMembershipMappingsMapObjectClassToAnyOrAll = "any"
)

func (e LdapServerMappingsForUsersUserGroupMembershipMappingsMapObjectClassToAnyOrAll) ToPointer() *LdapServerMappingsForUsersUserGroupMembershipMappingsMapObjectClassToAnyOrAll {
	return &e
}

func (e *LdapServerMappingsForUsersUserGroupMembershipMappingsMapObjectClassToAnyOrAll) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "any":
		*e = LdapServerMappingsForUsersUserGroupMembershipMappingsMapObjectClassToAnyOrAll(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LdapServerMappingsForUsersUserGroupMembershipMappingsMapObjectClassToAnyOrAll: %v", v)
	}
}

type LdapServerMappingsForUsersUserGroupMembershipMappingsSearchScope string

const (
	LdapServerMappingsForUsersUserGroupMembershipMappingsSearchScopeAllSubtrees    LdapServerMappingsForUsersUserGroupMembershipMappingsSearchScope = "All Subtrees"
	LdapServerMappingsForUsersUserGroupMembershipMappingsSearchScopeFirstLevelOnly LdapServerMappingsForUsersUserGroupMembershipMappingsSearchScope = "First Level Only"
)

func (e LdapServerMappingsForUsersUserGroupMembershipMappingsSearchScope) ToPointer() *LdapServerMappingsForUsersUserGroupMembershipMappingsSearchScope {
	return &e
}

func (e *LdapServerMappingsForUsersUserGroupMembershipMappingsSearchScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "All Subtrees":
		fallthrough
	case "First Level Only":
		*e = LdapServerMappingsForUsersUserGroupMembershipMappingsSearchScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LdapServerMappingsForUsersUserGroupMembershipMappingsSearchScope: %v", v)
	}
}

type LdapServerMappingsForUsersUserGroupMembershipMappingsUserGroupMembershipStoredIn string

const (
	LdapServerMappingsForUsersUserGroupMembershipMappingsUserGroupMembershipStoredInUserObject  LdapServerMappingsForUsersUserGroupMembershipMappingsUserGroupMembershipStoredIn = "user object"
	LdapServerMappingsForUsersUserGroupMembershipMappingsUserGroupMembershipStoredInGroupObject LdapServerMappingsForUsersUserGroupMembershipMappingsUserGroupMembershipStoredIn = "group object"
)

func (e LdapServerMappingsForUsersUserGroupMembershipMappingsUserGroupMembershipStoredIn) ToPointer() *LdapServerMappingsForUsersUserGroupMembershipMappingsUserGroupMembershipStoredIn {
	return &e
}

func (e *LdapServerMappingsForUsersUserGroupMembershipMappingsUserGroupMembershipStoredIn) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user object":
		fallthrough
	case "group object":
		*e = LdapServerMappingsForUsersUserGroupMembershipMappingsUserGroupMembershipStoredIn(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LdapServerMappingsForUsersUserGroupMembershipMappingsUserGroupMembershipStoredIn: %v", v)
	}
}

type LdapServerMappingsForUsersUserGroupMembershipMappings struct {
	AppendToUsername                  *string                                                                           `json:"append_to_username,omitempty"`
	GroupID                           *string                                                                           `json:"group_id,omitempty"`
	MapGroupMembershipToUserField     *string                                                                           `json:"map_group_membership_to_user_field,omitempty"`
	MapObjectClassToAnyOrAll          *LdapServerMappingsForUsersUserGroupMembershipMappingsMapObjectClassToAnyOrAll    `json:"map_object_class_to_any_or_all,omitempty"`
	MapUserMembershipToGroupField     *bool                                                                             `json:"map_user_membership_to_group_field,omitempty"`
	MapUserMembershipUseDn            *bool                                                                             `json:"map_user_membership_use_dn,omitempty"`
	ObjectClasses                     *string                                                                           `json:"object_classes,omitempty"`
	RecursiveLookups                  *bool                                                                             `json:"recursive_lookups,omitempty"`
	SearchBase                        *string                                                                           `json:"search_base,omitempty"`
	SearchScope                       *LdapServerMappingsForUsersUserGroupMembershipMappingsSearchScope                 `json:"search_scope,omitempty"`
	UseDn                             *bool                                                                             `json:"use_dn,omitempty"`
	UserGroupMembershipStoredIn       *LdapServerMappingsForUsersUserGroupMembershipMappingsUserGroupMembershipStoredIn `json:"user_group_membership_stored_in,omitempty"`
	UserGroupMembershipUseLdapCompare *bool                                                                             `json:"user_group_membership_use_ldap_compare,omitempty"`
	Username                          *string                                                                           `json:"username,omitempty"`
}

type LdapServerMappingsForUsersUserMappingsMapObjectClassToAnyOrAll string

const (
	LdapServerMappingsForUsersUserMappingsMapObjectClassToAnyOrAllAll LdapServerMappingsForUsersUserMappingsMapObjectClassToAnyOrAll = "all"
	LdapServerMappingsForUsersUserMappingsMapObjectClassToAnyOrAllAny LdapServerMappingsForUsersUserMappingsMapObjectClassToAnyOrAll = "any"
)

func (e LdapServerMappingsForUsersUserMappingsMapObjectClassToAnyOrAll) ToPointer() *LdapServerMappingsForUsersUserMappingsMapObjectClassToAnyOrAll {
	return &e
}

func (e *LdapServerMappingsForUsersUserMappingsMapObjectClassToAnyOrAll) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "any":
		*e = LdapServerMappingsForUsersUserMappingsMapObjectClassToAnyOrAll(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LdapServerMappingsForUsersUserMappingsMapObjectClassToAnyOrAll: %v", v)
	}
}

type LdapServerMappingsForUsersUserMappingsSearchScope string

const (
	LdapServerMappingsForUsersUserMappingsSearchScopeAllSubtrees    LdapServerMappingsForUsersUserMappingsSearchScope = "All Subtrees"
	LdapServerMappingsForUsersUserMappingsSearchScopeFirstLevelOnly LdapServerMappingsForUsersUserMappingsSearchScope = "First Level Only"
)

func (e LdapServerMappingsForUsersUserMappingsSearchScope) ToPointer() *LdapServerMappingsForUsersUserMappingsSearchScope {
	return &e
}

func (e *LdapServerMappingsForUsersUserMappingsSearchScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "All Subtrees":
		fallthrough
	case "First Level Only":
		*e = LdapServerMappingsForUsersUserMappingsSearchScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LdapServerMappingsForUsersUserMappingsSearchScope: %v", v)
	}
}

type LdapServerMappingsForUsersUserMappings struct {
	AppendToEmailResults     *string                                                         `json:"append_to_email_results,omitempty"`
	MapBuilding              *string                                                         `json:"map_building,omitempty"`
	MapDepartment            *string                                                         `json:"map_department,omitempty"`
	MapEmailAddress          *string                                                         `json:"map_email_address,omitempty"`
	MapObjectClassToAnyOrAll *LdapServerMappingsForUsersUserMappingsMapObjectClassToAnyOrAll `json:"map_object_class_to_any_or_all,omitempty"`
	MapPosition              *string                                                         `json:"map_position,omitempty"`
	MapRealname              *string                                                         `json:"map_realname,omitempty"`
	MapRoom                  *string                                                         `json:"map_room,omitempty"`
	MapTelephone             *string                                                         `json:"map_telephone,omitempty"`
	MapUserID                *string                                                         `json:"map_user_id,omitempty"`
	MapUserUUID              *string                                                         `json:"map_user_uuid,omitempty"`
	MapUsername              *string                                                         `json:"map_username,omitempty"`
	ObjectClasses            *string                                                         `json:"object_classes,omitempty"`
	SearchBase               *string                                                         `json:"search_base,omitempty"`
	SearchScope              *LdapServerMappingsForUsersUserMappingsSearchScope              `json:"search_scope,omitempty"`
}

type LdapServerMappingsForUsers struct {
	UserGroupMappings           *LdapServerMappingsForUsersUserGroupMappings           `json:"user_group_mappings,omitempty"`
	UserGroupMembershipMappings *LdapServerMappingsForUsersUserGroupMembershipMappings `json:"user_group_membership_mappings,omitempty"`
	UserMappings                *LdapServerMappingsForUsersUserMappings                `json:"user_mappings,omitempty"`
}

// LdapServer - OK
type LdapServer struct {
	Connection       *LdapServerConnection       `json:"connection,omitempty"`
	MappingsForUsers *LdapServerMappingsForUsers `json:"mappings_for_users,omitempty"`
}
