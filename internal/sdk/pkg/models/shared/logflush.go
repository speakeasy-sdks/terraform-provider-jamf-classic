// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LogflushComputersComputer struct {
	ID *int64
}

type LogflushComputers struct {
	Computer *LogflushComputersComputer
}

type LogflushInterval string

const (
	LogflushIntervalZeroDays    LogflushInterval = "Zero Days"
	LogflushIntervalZeroWeeks   LogflushInterval = "Zero Weeks"
	LogflushIntervalZeroMonths  LogflushInterval = "Zero Months"
	LogflushIntervalZeroYears   LogflushInterval = "Zero Years"
	LogflushIntervalOneDays     LogflushInterval = "One Days"
	LogflushIntervalOneWeeks    LogflushInterval = "One Weeks"
	LogflushIntervalOneMonths   LogflushInterval = "One Months"
	LogflushIntervalOneYears    LogflushInterval = "One Years"
	LogflushIntervalTwoDays     LogflushInterval = "Two Days"
	LogflushIntervalTwoWeeks    LogflushInterval = "Two Weeks"
	LogflushIntervalTwoMonths   LogflushInterval = "Two Months"
	LogflushIntervalTwoYears    LogflushInterval = "Two Years"
	LogflushIntervalThreeDays   LogflushInterval = "Three Days"
	LogflushIntervalThreeWeeks  LogflushInterval = "Three Weeks"
	LogflushIntervalThreeMonths LogflushInterval = "Three Months"
	LogflushIntervalThreeYears  LogflushInterval = "Three Years"
	LogflushIntervalSixDays     LogflushInterval = "Six Days"
	LogflushIntervalSixWeeks    LogflushInterval = "Six Weeks"
	LogflushIntervalSixMonths   LogflushInterval = "Six Months"
	LogflushIntervalSixYears    LogflushInterval = "Six Years"
)

func (e LogflushInterval) ToPointer() *LogflushInterval {
	return &e
}

func (e *LogflushInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Zero Days":
		fallthrough
	case "Zero Weeks":
		fallthrough
	case "Zero Months":
		fallthrough
	case "Zero Years":
		fallthrough
	case "One Days":
		fallthrough
	case "One Weeks":
		fallthrough
	case "One Months":
		fallthrough
	case "One Years":
		fallthrough
	case "Two Days":
		fallthrough
	case "Two Weeks":
		fallthrough
	case "Two Months":
		fallthrough
	case "Two Years":
		fallthrough
	case "Three Days":
		fallthrough
	case "Three Weeks":
		fallthrough
	case "Three Months":
		fallthrough
	case "Three Years":
		fallthrough
	case "Six Days":
		fallthrough
	case "Six Weeks":
		fallthrough
	case "Six Months":
		fallthrough
	case "Six Years":
		*e = LogflushInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogflushInterval: %v", v)
	}
}

type LogflushLog string

const (
	LogflushLogPolicy LogflushLog = "policy"
)

func (e LogflushLog) ToPointer() *LogflushLog {
	return &e
}

func (e *LogflushLog) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "policy":
		*e = LogflushLog(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogflushLog: %v", v)
	}
}

type Logflush struct {
	Computers *LogflushComputers
	Interval  LogflushInterval
	Log       LogflushLog
	LogID     int64
}
