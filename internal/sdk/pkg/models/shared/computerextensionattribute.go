// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ComputerExtensionAttributeDataType string

const (
	ComputerExtensionAttributeDataTypeString  ComputerExtensionAttributeDataType = "String"
	ComputerExtensionAttributeDataTypeInteger ComputerExtensionAttributeDataType = "Integer"
	ComputerExtensionAttributeDataTypeDate    ComputerExtensionAttributeDataType = "Date"
)

func (e ComputerExtensionAttributeDataType) ToPointer() *ComputerExtensionAttributeDataType {
	return &e
}

func (e *ComputerExtensionAttributeDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "String":
		fallthrough
	case "Integer":
		fallthrough
	case "Date":
		*e = ComputerExtensionAttributeDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputerExtensionAttributeDataType: %v", v)
	}
}

type ComputerExtensionAttributeInputTypeType string

const (
	ComputerExtensionAttributeInputTypeTypeScript      ComputerExtensionAttributeInputTypeType = "script"
	ComputerExtensionAttributeInputTypeTypeTextField   ComputerExtensionAttributeInputTypeType = "Text Field"
	ComputerExtensionAttributeInputTypeTypeLdapMapping ComputerExtensionAttributeInputTypeType = "LDAP Mapping"
	ComputerExtensionAttributeInputTypeTypePopUpMenu   ComputerExtensionAttributeInputTypeType = "Pop-up Menu"
)

func (e ComputerExtensionAttributeInputTypeType) ToPointer() *ComputerExtensionAttributeInputTypeType {
	return &e
}

func (e *ComputerExtensionAttributeInputTypeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "script":
		fallthrough
	case "Text Field":
		fallthrough
	case "LDAP Mapping":
		fallthrough
	case "Pop-up Menu":
		*e = ComputerExtensionAttributeInputTypeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputerExtensionAttributeInputTypeType: %v", v)
	}
}

type ComputerExtensionAttributeInputType struct {
	Type *ComputerExtensionAttributeInputTypeType `json:"type,omitempty"`
}

// ComputerExtensionAttributeInventoryDisplay - Category in which to display the extension attribute in Jamf Pro
type ComputerExtensionAttributeInventoryDisplay string

const (
	ComputerExtensionAttributeInventoryDisplayGeneral             ComputerExtensionAttributeInventoryDisplay = "General"
	ComputerExtensionAttributeInventoryDisplayHardware            ComputerExtensionAttributeInventoryDisplay = "Hardware"
	ComputerExtensionAttributeInventoryDisplayOperatingSystem     ComputerExtensionAttributeInventoryDisplay = "Operating System"
	ComputerExtensionAttributeInventoryDisplayUserAndLocation     ComputerExtensionAttributeInventoryDisplay = "User and Location"
	ComputerExtensionAttributeInventoryDisplayPurchasing          ComputerExtensionAttributeInventoryDisplay = "Purchasing"
	ComputerExtensionAttributeInventoryDisplayExtensionAttributes ComputerExtensionAttributeInventoryDisplay = "Extension Attributes"
)

func (e ComputerExtensionAttributeInventoryDisplay) ToPointer() *ComputerExtensionAttributeInventoryDisplay {
	return &e
}

func (e *ComputerExtensionAttributeInventoryDisplay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "Hardware":
		fallthrough
	case "Operating System":
		fallthrough
	case "User and Location":
		fallthrough
	case "Purchasing":
		fallthrough
	case "Extension Attributes":
		*e = ComputerExtensionAttributeInventoryDisplay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputerExtensionAttributeInventoryDisplay: %v", v)
	}
}

// ComputerExtensionAttribute - OK
type ComputerExtensionAttribute struct {
	DataType *ComputerExtensionAttributeDataType `json:"data_type,omitempty"`
	// Description of the extension attribute
	Description *string `json:"description,omitempty"`
	// Only applicable to script input type
	Enabled   *bool                                `json:"enabled,omitempty"`
	ID        *int64                               `json:"id,omitempty"`
	InputType *ComputerExtensionAttributeInputType `json:"input_type,omitempty"`
	// Category in which to display the extension attribute in Jamf Pro
	InventoryDisplay *ComputerExtensionAttributeInventoryDisplay `json:"inventory_display,omitempty"`
	// Extension attribute name
	Name string `json:"name"`
}
