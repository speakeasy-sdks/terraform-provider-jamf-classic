// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ComputerHardwareSoftwareReportsFontReportType string

const (
	ComputerHardwareSoftwareReportsFontReportTypeAdded   ComputerHardwareSoftwareReportsFontReportType = "Added"
	ComputerHardwareSoftwareReportsFontReportTypeDeleted ComputerHardwareSoftwareReportsFontReportType = "Deleted"
)

func (e ComputerHardwareSoftwareReportsFontReportType) ToPointer() *ComputerHardwareSoftwareReportsFontReportType {
	return &e
}

func (e *ComputerHardwareSoftwareReportsFontReportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Added":
		fallthrough
	case "Deleted":
		*e = ComputerHardwareSoftwareReportsFontReportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputerHardwareSoftwareReportsFontReportType: %v", v)
	}
}

type ComputerHardwareSoftwareReportsFontReport struct {
	DateTime      *string                                        `json:"date_time,omitempty"`
	DateTimeEpoch *string                                        `json:"date_time_epoch,omitempty"`
	DateTimeUtc   *string                                        `json:"date_time_utc,omitempty"`
	Name          *string                                        `json:"name,omitempty"`
	Path          *string                                        `json:"path,omitempty"`
	Type          *ComputerHardwareSoftwareReportsFontReportType `json:"type,omitempty"`
	Version       *string                                        `json:"version,omitempty"`
}

type ComputerHardwareSoftwareReportsHardwareReport struct {
	NICSpeed                 *string `json:"NIC_speed,omitempty"`
	BootPartitionUsedPercent *int64  `json:"boot_partition_used_percent,omitempty"`
	CoreCount                *int64  `json:"core_count,omitempty"`
	DateTime                 *string `json:"date_time,omitempty"`
	DateTimeEpoch            *string `json:"date_time_epoch,omitempty"`
	DateTimeUtc              *string `json:"date_time_utc,omitempty"`
	Make                     *string `json:"make,omitempty"`
	ModelIdentifier          *string `json:"model_identifier,omitempty"`
	OpenRAMSlots             *int64  `json:"open_ram_slots,omitempty"`
	OperatingSystem          *string `json:"operating_system,omitempty"`
	OpticalDrive             *string `json:"optical_drive,omitempty"`
	ProcessorCount           *int64  `json:"processor_count,omitempty"`
	ProcessorSpeedMhz        *int64  `json:"processor_speed_mhz,omitempty"`
	SerialNumber             *string `json:"serial_number,omitempty"`
	ServicePack              *string `json:"service_pack,omitempty"`
	TotalHarddriveSize       *string `json:"total_harddrive_size,omitempty"`
	TotalRAMMb               *int64  `json:"total_ram_mb,omitempty"`
}

type ComputerHardwareSoftwareReportsPluginReportType string

const (
	ComputerHardwareSoftwareReportsPluginReportTypeAdded   ComputerHardwareSoftwareReportsPluginReportType = "Added"
	ComputerHardwareSoftwareReportsPluginReportTypeRemoved ComputerHardwareSoftwareReportsPluginReportType = "Removed"
)

func (e ComputerHardwareSoftwareReportsPluginReportType) ToPointer() *ComputerHardwareSoftwareReportsPluginReportType {
	return &e
}

func (e *ComputerHardwareSoftwareReportsPluginReportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Added":
		fallthrough
	case "Removed":
		*e = ComputerHardwareSoftwareReportsPluginReportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputerHardwareSoftwareReportsPluginReportType: %v", v)
	}
}

type ComputerHardwareSoftwareReportsPluginReport struct {
	DateTime      *string                                          `json:"date_time,omitempty"`
	DateTimeEpoch *string                                          `json:"date_time_epoch,omitempty"`
	DateTimeUtc   *string                                          `json:"date_time_utc,omitempty"`
	Name          *string                                          `json:"name,omitempty"`
	Path          *string                                          `json:"path,omitempty"`
	Type          *ComputerHardwareSoftwareReportsPluginReportType `json:"type,omitempty"`
	Version       *string                                          `json:"version,omitempty"`
}

type ComputerHardwareSoftwareReportsSoftwareReportType string

const (
	ComputerHardwareSoftwareReportsSoftwareReportTypeAdded   ComputerHardwareSoftwareReportsSoftwareReportType = "Added"
	ComputerHardwareSoftwareReportsSoftwareReportTypeDeleted ComputerHardwareSoftwareReportsSoftwareReportType = "Deleted"
)

func (e ComputerHardwareSoftwareReportsSoftwareReportType) ToPointer() *ComputerHardwareSoftwareReportsSoftwareReportType {
	return &e
}

func (e *ComputerHardwareSoftwareReportsSoftwareReportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Added":
		fallthrough
	case "Deleted":
		*e = ComputerHardwareSoftwareReportsSoftwareReportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputerHardwareSoftwareReportsSoftwareReportType: %v", v)
	}
}

type ComputerHardwareSoftwareReportsSoftwareReport struct {
	DateTime      *string                                            `json:"date_time,omitempty"`
	DateTimeEpoch *string                                            `json:"date_time_epoch,omitempty"`
	DateTimeUtc   *string                                            `json:"date_time_utc,omitempty"`
	Name          *string                                            `json:"name,omitempty"`
	Path          *string                                            `json:"path,omitempty"`
	Type          *ComputerHardwareSoftwareReportsSoftwareReportType `json:"type,omitempty"`
	Version       *string                                            `json:"version,omitempty"`
}

// ComputerHardwareSoftwareReports - OK
type ComputerHardwareSoftwareReports struct {
	FontReport     *ComputerHardwareSoftwareReportsFontReport     `json:"font_report,omitempty"`
	HardwareReport *ComputerHardwareSoftwareReportsHardwareReport `json:"hardware_report,omitempty"`
	PluginReport   *ComputerHardwareSoftwareReportsPluginReport   `json:"plugin_report,omitempty"`
	SoftwareReport *ComputerHardwareSoftwareReportsSoftwareReport `json:"software_report,omitempty"`
}
