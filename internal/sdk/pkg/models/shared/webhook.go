// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WebhookAuthenticationType string

const (
	WebhookAuthenticationTypeNone  WebhookAuthenticationType = "NONE"
	WebhookAuthenticationTypeBasic WebhookAuthenticationType = "BASIC"
)

func (e WebhookAuthenticationType) ToPointer() *WebhookAuthenticationType {
	return &e
}

func (e *WebhookAuthenticationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NONE":
		fallthrough
	case "BASIC":
		*e = WebhookAuthenticationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookAuthenticationType: %v", v)
	}
}

type WebhookContentType string

const (
	WebhookContentTypeTextXML         WebhookContentType = "text/xml"
	WebhookContentTypeApplicationJSON WebhookContentType = "application/json"
)

func (e WebhookContentType) ToPointer() *WebhookContentType {
	return &e
}

func (e *WebhookContentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text/xml":
		fallthrough
	case "application/json":
		*e = WebhookContentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookContentType: %v", v)
	}
}

type WebhookDisplayFieldsDisplayField struct {
	// Name of the display field to include for smart group based webhook events
	Name *string `json:"name,omitempty"`
}

type WebhookDisplayFields struct {
	DisplayField *WebhookDisplayFieldsDisplayField `json:"display_field,omitempty"`
	Size         *int64                            `json:"size,omitempty"`
}

type WebhookEvent string

const (
	WebhookEventComputerAdded                          WebhookEvent = "ComputerAdded"
	WebhookEventComputerCheckIn                        WebhookEvent = "ComputerCheckIn"
	WebhookEventComputerInventoryCompleted             WebhookEvent = "ComputerInventoryCompleted"
	WebhookEventComputerPolicyFinished                 WebhookEvent = "ComputerPolicyFinished"
	WebhookEventComputerPushCapabilityChanged          WebhookEvent = "ComputerPushCapabilityChanged"
	WebhookEventJssShutdown                            WebhookEvent = "JSSShutdown"
	WebhookEventJssStartup                             WebhookEvent = "JSSStartup"
	WebhookEventMobileDeviceCheckIn                    WebhookEvent = "MobileDeviceCheckIn"
	WebhookEventMobileDeviceCommandCompleted           WebhookEvent = "MobileDeviceCommandCompleted"
	WebhookEventMobileDeviceEnrolled                   WebhookEvent = "MobileDeviceEnrolled"
	WebhookEventMobileDevicePushSent                   WebhookEvent = "MobileDevicePushSent"
	WebhookEventMobileDeviceUnEnrolled                 WebhookEvent = "MobileDeviceUnEnrolled"
	WebhookEventPatchSoftwareTitleUpdated              WebhookEvent = "PatchSoftwareTitleUpdated"
	WebhookEventPushSent                               WebhookEvent = "PushSent"
	WebhookEventRestAPIOperation                       WebhookEvent = "RestAPIOperation"
	WebhookEventScepChallenge                          WebhookEvent = "SCEPChallenge"
	WebhookEventSmartGroupComputerMembershipChange     WebhookEvent = "SmartGroupComputerMembershipChange"
	WebhookEventSmartGroupMobileDeviceMembershipChange WebhookEvent = "SmartGroupMobileDeviceMembershipChange"
)

func (e WebhookEvent) ToPointer() *WebhookEvent {
	return &e
}

func (e *WebhookEvent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ComputerAdded":
		fallthrough
	case "ComputerCheckIn":
		fallthrough
	case "ComputerInventoryCompleted":
		fallthrough
	case "ComputerPolicyFinished":
		fallthrough
	case "ComputerPushCapabilityChanged":
		fallthrough
	case "JSSShutdown":
		fallthrough
	case "JSSStartup":
		fallthrough
	case "MobileDeviceCheckIn":
		fallthrough
	case "MobileDeviceCommandCompleted":
		fallthrough
	case "MobileDeviceEnrolled":
		fallthrough
	case "MobileDevicePushSent":
		fallthrough
	case "MobileDeviceUnEnrolled":
		fallthrough
	case "PatchSoftwareTitleUpdated":
		fallthrough
	case "PushSent":
		fallthrough
	case "RestAPIOperation":
		fallthrough
	case "SCEPChallenge":
		fallthrough
	case "SmartGroupComputerMembershipChange":
		fallthrough
	case "SmartGroupMobileDeviceMembershipChange":
		*e = WebhookEvent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookEvent: %v", v)
	}
}

// Webhook - OK
type Webhook struct {
	AuthenticationType *WebhookAuthenticationType `json:"authentication_type,omitempty"`
	// Number of seconds to attempt to connect to the webhooks host server
	ConnectionTimeout                 *int64                 `json:"connection_timeout,omitempty"`
	ContentType                       *WebhookContentType    `json:"content_type,omitempty"`
	DisplayFields                     []WebhookDisplayFields `json:"display_fields,omitempty"`
	EnableDisplayFieldsForGroupObject *bool                  `json:"enable_display_fields_for_group_object,omitempty"`
	Enabled                           *bool                  `json:"enabled,omitempty"`
	Event                             WebhookEvent           `json:"event"`
	ID                                *int64                 `json:"id,omitempty"`
	Name                              string                 `json:"name"`
	Password                          *string                `json:"password,omitempty"`
	// Number of seconds to wait for a response from the webhooks host server after sending a request
	ReadTimeout *int64  `json:"read_timeout,omitempty"`
	URL         string  `json:"url"`
	Username    *string `json:"username,omitempty"`
}
