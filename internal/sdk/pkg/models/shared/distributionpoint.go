// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DistributionPointConnectionType string

const (
	DistributionPointConnectionTypeSmb DistributionPointConnectionType = "SMB"
	DistributionPointConnectionTypeAfp DistributionPointConnectionType = "AFP"
)

func (e DistributionPointConnectionType) ToPointer() *DistributionPointConnectionType {
	return &e
}

func (e *DistributionPointConnectionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SMB":
		fallthrough
	case "AFP":
		*e = DistributionPointConnectionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionPointConnectionType: %v", v)
	}
}

type DistributionPointProtocol string

const (
	DistributionPointProtocolHTTP  DistributionPointProtocol = "http"
	DistributionPointProtocolHTTPS DistributionPointProtocol = "https"
)

func (e DistributionPointProtocol) ToPointer() *DistributionPointProtocol {
	return &e
}

func (e *DistributionPointProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "https":
		*e = DistributionPointProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionPointProtocol: %v", v)
	}
}

// DistributionPoint - OK
type DistributionPoint struct {
	ConnectionType *DistributionPointConnectionType `json:"connection_type,omitempty"`
	// Path to the share
	Context              *string `json:"context,omitempty"`
	EnableLoadBalancing  *bool   `json:"enable_load_balancing,omitempty"`
	FailoverPoint        *string `json:"failover_point,omitempty"`
	FailoverPointURL     *string `json:"failover_point_url,omitempty"`
	HTTPDownloadsEnabled *bool   `json:"http_downloads_enabled,omitempty"`
	// Password for basic authentication
	HTTPPassword *string `json:"http_password,omitempty"`
	// URL to download packages from
	HTTPURL *string `json:"http_url,omitempty"`
	// Username to authenticate with for basic authentication
	HTTPUsername *string `json:"http_username,omitempty"`
	ID           *int64  `json:"id,omitempty"`
	// IP address or hostname of distribution point
	IPAddress *string `json:"ip_address,omitempty"`
	// Only one share can be set as master
	IsMaster  *bool   `json:"is_master,omitempty"`
	LocalPath *string `json:"local_path,omitempty"`
	// Name of the distribution point
	Name                     string                     `json:"name"`
	NoAuthenticationRequired *bool                      `json:"no_authentication_required,omitempty"`
	Password                 *string                    `json:"password,omitempty"`
	Port                     *int64                     `json:"port,omitempty"`
	Protocol                 *DistributionPointProtocol `json:"protocol,omitempty"`
	// Password for the read only account
	ReadOnlyPassword *string `json:"read_only_password,omitempty"`
	// Account with read only privileges to the share
	ReadOnlyUsername string `json:"read_only_username"`
	// Password for the read/write account
	ReadWritePassword *string `json:"read_write_password,omitempty"`
	// Account with read/write privileges to the share
	ReadWriteUsername string `json:"read_write_username"`
	// Name of the share
	ShareName                string  `json:"share_name"`
	SharePort                *int64  `json:"share_port,omitempty"`
	SSHUsername              *string `json:"ssh_username,omitempty"`
	UsernamePasswordRequired *bool   `json:"username_password_required,omitempty"`
	// Workgroup or domain of the accounts that have access to the share (SMB only)
	WorkgroupOrDomain *string `json:"workgroup_or_domain,omitempty"`
}
