// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EbookGeneralDeploymentType string

const (
	EbookGeneralDeploymentTypeMakeAvailableInSelfService               EbookGeneralDeploymentType = "Make Available in Self Service"
	EbookGeneralDeploymentTypeInstallAutomaticallyPromptUsersToInstall EbookGeneralDeploymentType = "Install Automatically/Prompt Users to Install"
)

func (e EbookGeneralDeploymentType) ToPointer() *EbookGeneralDeploymentType {
	return &e
}

func (e *EbookGeneralDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Make Available in Self Service":
		fallthrough
	case "Install Automatically/Prompt Users to Install":
		*e = EbookGeneralDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EbookGeneralDeploymentType: %v", v)
	}
}

type EbookGeneralFileType string

const (
	EbookGeneralFileTypePdf   EbookGeneralFileType = "PDF"
	EbookGeneralFileTypeIbook EbookGeneralFileType = "IBOOK"
	EbookGeneralFileTypeEpub  EbookGeneralFileType = "EPUB"
)

func (e EbookGeneralFileType) ToPointer() *EbookGeneralFileType {
	return &e
}

func (e *EbookGeneralFileType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PDF":
		fallthrough
	case "IBOOK":
		fallthrough
	case "EPUB":
		*e = EbookGeneralFileType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EbookGeneralFileType: %v", v)
	}
}

type EbookGeneralSelfServiceIcon struct {
	Data *string `json:"data,omitempty"`
	ID   *int64  `json:"id,omitempty"`
	URI  *string `json:"uri,omitempty"`
}

type EbookGeneral struct {
	Author          *string                     `json:"author,omitempty"`
	Category        *CategoryObject             `json:"category,omitempty"`
	DeployAsManaged *bool                       `json:"deploy_as_managed,omitempty"`
	DeploymentType  *EbookGeneralDeploymentType `json:"deployment_type,omitempty"`
	FileType        *EbookGeneralFileType       `json:"file_type,omitempty"`
	Free            *bool                       `json:"free,omitempty"`
	ID              *int64                      `json:"id,omitempty"`
	// Name of the ebook
	Name            string                       `json:"name"`
	SelfServiceIcon *EbookGeneralSelfServiceIcon `json:"self_service_icon,omitempty"`
	Site            *SiteObject                  `json:"site,omitempty"`
	// Download URL for the ebook
	URL     *string `json:"url,omitempty"`
	Version *string `json:"version,omitempty"`
}

type EbookScopeBuildings struct {
	Building *IDName `json:"building,omitempty"`
}

type EbookScopeClasses struct {
	Class *IDName `json:"class,omitempty"`
}

type EbookScopeComputerGroups struct {
	ComputerGroup *IDName `json:"computer_group,omitempty"`
}

type EbookScopeComputersComputer struct {
	ID *int64 `json:"id,omitempty"`
	// Name of the computer
	Name *string `json:"name,omitempty"`
	Udid *string `json:"udid,omitempty"`
}

type EbookScopeComputers struct {
	Computer *EbookScopeComputersComputer `json:"computer,omitempty"`
}

type EbookScopeDepartments struct {
	Department *IDName `json:"department,omitempty"`
}

type EbookScopeExclusionsBuildings struct {
	Building *IDName `json:"building,omitempty"`
}

type EbookScopeExclusionsComputerGroups struct {
	ComputerGroup *IDName `json:"computer_group,omitempty"`
}

type EbookScopeExclusionsComputersComputer struct {
	ID *int64 `json:"id,omitempty"`
	// Name of the computer
	Name *string `json:"name,omitempty"`
	Udid *string `json:"udid,omitempty"`
}

type EbookScopeExclusionsComputers struct {
	Computer *EbookScopeExclusionsComputersComputer `json:"computer,omitempty"`
}

type EbookScopeExclusionsDepartments struct {
	Department *IDName `json:"department,omitempty"`
}

type EbookScopeExclusionsJssUserGroups struct {
	UserGroup *IDName `json:"user_group,omitempty"`
}

type EbookScopeExclusionsJssUsers struct {
	User *IDName `json:"user,omitempty"`
}

type EbookScopeExclusionsMobileDeviceGroups struct {
	MobileDeviceGroup *IDName `json:"mobile_device_group,omitempty"`
}

type EbookScopeExclusionsMobileDevicesMobileDevice struct {
	ID *int64 `json:"id,omitempty"`
	// Name of the device
	Name           *string `json:"name,omitempty"`
	Udid           *string `json:"udid,omitempty"`
	WifiMacAddress *string `json:"wifi_mac_address,omitempty"`
}

type EbookScopeExclusionsMobileDevices struct {
	MobileDevice *EbookScopeExclusionsMobileDevicesMobileDevice `json:"mobile_device,omitempty"`
}

type EbookScopeExclusionsNetworkSegmentsNetworkSegment struct {
	ID *int64 `json:"id,omitempty"`
	// Name of the network segment
	Name *string `json:"name,omitempty"`
	UID  *string `json:"uid,omitempty"`
}

type EbookScopeExclusionsNetworkSegments struct {
	NetworkSegment *EbookScopeExclusionsNetworkSegmentsNetworkSegment `json:"network_segment,omitempty"`
}

type EbookScopeExclusionsUserGroups struct {
	UserGroup *IDName `json:"user_group,omitempty"`
}

type EbookScopeExclusionsUsersUser struct {
	Name *string `json:"name,omitempty"`
}

type EbookScopeExclusionsUsers struct {
	User *EbookScopeExclusionsUsersUser `json:"user,omitempty"`
}

type EbookScopeExclusions struct {
	Buildings          []EbookScopeExclusionsBuildings          `json:"buildings,omitempty"`
	ComputerGroups     []EbookScopeExclusionsComputerGroups     `json:"computer_groups,omitempty"`
	Computers          []EbookScopeExclusionsComputers          `json:"computers,omitempty"`
	Departments        []EbookScopeExclusionsDepartments        `json:"departments,omitempty"`
	JssUserGroups      []EbookScopeExclusionsJssUserGroups      `json:"jss_user_groups,omitempty"`
	JssUsers           []EbookScopeExclusionsJssUsers           `json:"jss_users,omitempty"`
	MobileDeviceGroups []EbookScopeExclusionsMobileDeviceGroups `json:"mobile_device_groups,omitempty"`
	MobileDevices      []EbookScopeExclusionsMobileDevices      `json:"mobile_devices,omitempty"`
	NetworkSegments    []EbookScopeExclusionsNetworkSegments    `json:"network_segments,omitempty"`
	UserGroups         []EbookScopeExclusionsUserGroups         `json:"user_groups,omitempty"`
	Users              []EbookScopeExclusionsUsers              `json:"users,omitempty"`
}

type EbookScopeJssUserGroups struct {
	UserGroup *IDName `json:"user_group,omitempty"`
}

type EbookScopeJssUsers struct {
	User *IDName `json:"user,omitempty"`
}

type EbookScopeLimitationsNetworkSegments struct {
	NetworkSegment *IDName `json:"network_segment,omitempty"`
}

type EbookScopeLimitationsUserGroups struct {
	UserGroup *IDName `json:"user_group,omitempty"`
}

type EbookScopeLimitationsUsers struct {
	User *IDName `json:"user,omitempty"`
}

type EbookScopeLimitations struct {
	NetworkSegments []EbookScopeLimitationsNetworkSegments `json:"network_segments,omitempty"`
	UserGroups      []EbookScopeLimitationsUserGroups      `json:"user_groups,omitempty"`
	Users           []EbookScopeLimitationsUsers           `json:"users,omitempty"`
}

type EbookScopeMobileDeviceGroups struct {
	MobileDeviceGroup *IDName `json:"mobile_device_group,omitempty"`
}

type EbookScopeMobileDevicesMobileDevice struct {
	ID *int64 `json:"id,omitempty"`
	// Name of the device
	Name           *string `json:"name,omitempty"`
	Udid           *string `json:"udid,omitempty"`
	WifiMacAddress *string `json:"wifi_mac_address,omitempty"`
}

type EbookScopeMobileDevices struct {
	MobileDevice *EbookScopeMobileDevicesMobileDevice `json:"mobile_device,omitempty"`
}

type EbookScope struct {
	AllComputers       *bool                          `json:"all_computers,omitempty"`
	AllJssUsers        *bool                          `json:"all_jss_users,omitempty"`
	AllMobileDevices   *bool                          `json:"all_mobile_devices,omitempty"`
	Buildings          []EbookScopeBuildings          `json:"buildings,omitempty"`
	Classes            []EbookScopeClasses            `json:"classes,omitempty"`
	ComputerGroups     []EbookScopeComputerGroups     `json:"computer_groups,omitempty"`
	Computers          []EbookScopeComputers          `json:"computers,omitempty"`
	Departments        []EbookScopeDepartments        `json:"departments,omitempty"`
	Exclusions         *EbookScopeExclusions          `json:"exclusions,omitempty"`
	JssUserGroups      []EbookScopeJssUserGroups      `json:"jss_user_groups,omitempty"`
	JssUsers           []EbookScopeJssUsers           `json:"jss_users,omitempty"`
	Limitations        *EbookScopeLimitations         `json:"limitations,omitempty"`
	MobileDeviceGroups []EbookScopeMobileDeviceGroups `json:"mobile_device_groups,omitempty"`
	MobileDevices      []EbookScopeMobileDevices      `json:"mobile_devices,omitempty"`
}

type EbookSelfServiceSelfServiceCategoriesCategory struct {
	// Self Service categories to be displayed ebook in
	DisplayIn *string `json:"display_in,omitempty"`
	FeatureIn *bool   `json:"feature_in,omitempty"`
	ID        *int64  `json:"id,omitempty"`
	// Name of the category
	Name *string `json:"name,omitempty"`
}

type EbookSelfServiceSelfServiceCategories struct {
	Category *EbookSelfServiceSelfServiceCategoriesCategory `json:"category,omitempty"`
}

type EbookSelfServiceSelfServiceIcon struct {
	Data *string `json:"data,omitempty"`
	ID   *int64  `json:"id,omitempty"`
	URI  *string `json:"uri,omitempty"`
}

type EbookSelfService struct {
	FeatureOnMainPage           *bool                                  `json:"feature_on_main_page,omitempty"`
	ForceUsersToViewDescription *bool                                  `json:"force_users_to_view_description,omitempty"`
	InstallButtonText           *string                                `json:"install_button_text,omitempty"`
	Notification                *bool                                  `json:"notification,omitempty"`
	NotificationMessage         *string                                `json:"notification_message,omitempty"`
	NotificationSubject         *string                                `json:"notification_subject,omitempty"`
	SelfServiceCategories       *EbookSelfServiceSelfServiceCategories `json:"self_service_categories,omitempty"`
	SelfServiceDescription      *string                                `json:"self_service_description,omitempty"`
	SelfServiceDisplayName      *string                                `json:"self_service_display_name,omitempty"`
	SelfServiceIcon             *EbookSelfServiceSelfServiceIcon       `json:"self_service_icon,omitempty"`
}

// Ebook - OK
type Ebook struct {
	General     *EbookGeneral     `json:"general,omitempty"`
	Scope       *EbookScope       `json:"scope,omitempty"`
	SelfService *EbookSelfService `json:"self_service,omitempty"`
}
