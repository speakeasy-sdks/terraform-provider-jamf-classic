// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ComputerInventoryCollectionApplicationsApplicationPlatform string

const (
	ComputerInventoryCollectionApplicationsApplicationPlatformMac     ComputerInventoryCollectionApplicationsApplicationPlatform = "Mac"
	ComputerInventoryCollectionApplicationsApplicationPlatformWindows ComputerInventoryCollectionApplicationsApplicationPlatform = "Windows"
)

func (e ComputerInventoryCollectionApplicationsApplicationPlatform) ToPointer() *ComputerInventoryCollectionApplicationsApplicationPlatform {
	return &e
}

func (e *ComputerInventoryCollectionApplicationsApplicationPlatform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mac":
		fallthrough
	case "Windows":
		*e = ComputerInventoryCollectionApplicationsApplicationPlatform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputerInventoryCollectionApplicationsApplicationPlatform: %v", v)
	}
}

type ComputerInventoryCollectionApplicationsApplication struct {
	Path     *string                                                     `json:"path,omitempty"`
	Platform *ComputerInventoryCollectionApplicationsApplicationPlatform `json:"platform,omitempty"`
}

type ComputerInventoryCollectionApplications struct {
	Application *ComputerInventoryCollectionApplicationsApplication `json:"application,omitempty"`
}

type ComputerInventoryCollectionFontsFontPlatform string

const (
	ComputerInventoryCollectionFontsFontPlatformMac     ComputerInventoryCollectionFontsFontPlatform = "Mac"
	ComputerInventoryCollectionFontsFontPlatformWindows ComputerInventoryCollectionFontsFontPlatform = "Windows"
)

func (e ComputerInventoryCollectionFontsFontPlatform) ToPointer() *ComputerInventoryCollectionFontsFontPlatform {
	return &e
}

func (e *ComputerInventoryCollectionFontsFontPlatform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mac":
		fallthrough
	case "Windows":
		*e = ComputerInventoryCollectionFontsFontPlatform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputerInventoryCollectionFontsFontPlatform: %v", v)
	}
}

type ComputerInventoryCollectionFontsFont struct {
	Path     *string                                       `json:"path,omitempty"`
	Platform *ComputerInventoryCollectionFontsFontPlatform `json:"platform,omitempty"`
}

type ComputerInventoryCollectionFonts struct {
	Font *ComputerInventoryCollectionFontsFont `json:"font,omitempty"`
}

type ComputerInventoryCollectionPluginsPluginPlatform string

const (
	ComputerInventoryCollectionPluginsPluginPlatformMac     ComputerInventoryCollectionPluginsPluginPlatform = "Mac"
	ComputerInventoryCollectionPluginsPluginPlatformWindows ComputerInventoryCollectionPluginsPluginPlatform = "Windows"
)

func (e ComputerInventoryCollectionPluginsPluginPlatform) ToPointer() *ComputerInventoryCollectionPluginsPluginPlatform {
	return &e
}

func (e *ComputerInventoryCollectionPluginsPluginPlatform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mac":
		fallthrough
	case "Windows":
		*e = ComputerInventoryCollectionPluginsPluginPlatform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputerInventoryCollectionPluginsPluginPlatform: %v", v)
	}
}

type ComputerInventoryCollectionPluginsPlugin struct {
	Path     *string                                           `json:"path,omitempty"`
	Platform *ComputerInventoryCollectionPluginsPluginPlatform `json:"platform,omitempty"`
}

type ComputerInventoryCollectionPlugins struct {
	Plugin *ComputerInventoryCollectionPluginsPlugin `json:"plugin,omitempty"`
}

// ComputerInventoryCollection - OK
type ComputerInventoryCollection struct {
	ActiveServices                *bool                                     `json:"active_services,omitempty"`
	Applications                  []ComputerInventoryCollectionApplications `json:"applications,omitempty"`
	AvailableSoftwareUpdates      *bool                                     `json:"available_software_updates,omitempty"`
	ComputerLocationInformation   *bool                                     `json:"computer_location_information,omitempty"`
	Fonts                         []ComputerInventoryCollectionFonts        `json:"fonts,omitempty"`
	HiddenAccounts                *bool                                     `json:"hidden_accounts,omitempty"`
	HomeDirectorySizes            *bool                                     `json:"home_directory_sizes,omitempty"`
	InclueApplications            *bool                                     `json:"inclue_applications,omitempty"`
	InclueFonts                   *bool                                     `json:"inclue_fonts,omitempty"`
	IncluePlugins                 *bool                                     `json:"inclue_plugins,omitempty"`
	LocalUserAccounts             *bool                                     `json:"local_user_accounts,omitempty"`
	MobileDeviceAppPurchasingInfo *bool                                     `json:"mobile_device_app_purchasing_info,omitempty"`
	PackageReceipts               *bool                                     `json:"package_receipts,omitempty"`
	Plugins                       []ComputerInventoryCollectionPlugins      `json:"plugins,omitempty"`
	Printers                      *bool                                     `json:"printers,omitempty"`
}
