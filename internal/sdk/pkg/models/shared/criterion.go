// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CriterionAndOr string

const (
	CriterionAndOrAnd CriterionAndOr = "and"
	CriterionAndOrOr  CriterionAndOr = "or"
)

func (e CriterionAndOr) ToPointer() *CriterionAndOr {
	return &e
}

func (e *CriterionAndOr) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "and":
		fallthrough
	case "or":
		*e = CriterionAndOr(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CriterionAndOr: %v", v)
	}
}

type Criterion struct {
	AndOr        *CriterionAndOr `json:"and_or,omitempty"`
	ClosingParen *bool           `json:"closing_paren,omitempty"`
	// Name of the criteria
	Name         *string `json:"name,omitempty"`
	OpeningParen *bool   `json:"opening_paren,omitempty"`
	Priority     *int64  `json:"priority,omitempty"`
	// Operator
	SearchType *string `json:"search_type,omitempty"`
	Value      *string `json:"value,omitempty"`
}
