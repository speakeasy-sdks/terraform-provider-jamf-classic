// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PeripheralTypeFieldsFieldChoices struct {
	Choice *string `json:"choice,omitempty"`
}

type PeripheralTypeFieldsFieldType string

const (
	PeripheralTypeFieldsFieldTypeMenu PeripheralTypeFieldsFieldType = "menu"
	PeripheralTypeFieldsFieldTypeText PeripheralTypeFieldsFieldType = "text"
)

func (e PeripheralTypeFieldsFieldType) ToPointer() *PeripheralTypeFieldsFieldType {
	return &e
}

func (e *PeripheralTypeFieldsFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "menu":
		fallthrough
	case "text":
		*e = PeripheralTypeFieldsFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PeripheralTypeFieldsFieldType: %v", v)
	}
}

type PeripheralTypeFieldsField struct {
	Choices []PeripheralTypeFieldsFieldChoices `json:"choices,omitempty"`
	Name    *string                            `json:"name,omitempty"`
	Order   *int64                             `json:"order,omitempty"`
	Type    *PeripheralTypeFieldsFieldType     `json:"type,omitempty"`
}

type PeripheralTypeFields struct {
	Field *PeripheralTypeFieldsField `json:"field,omitempty"`
}

// PeripheralType - OK
type PeripheralType struct {
	Fields []PeripheralTypeFields `json:"fields,omitempty"`
	ID     *int64                 `json:"id,omitempty"`
	Name   string                 `json:"name"`
}
