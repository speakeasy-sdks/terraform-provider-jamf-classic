// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type UserExtensionAttributesExtensionAttributeType string

const (
	UserExtensionAttributesExtensionAttributeTypeString  UserExtensionAttributesExtensionAttributeType = "String"
	UserExtensionAttributesExtensionAttributeTypeInteger UserExtensionAttributesExtensionAttributeType = "Integer"
	UserExtensionAttributesExtensionAttributeTypeDate    UserExtensionAttributesExtensionAttributeType = "Date"
)

func (e UserExtensionAttributesExtensionAttributeType) ToPointer() *UserExtensionAttributesExtensionAttributeType {
	return &e
}

func (e *UserExtensionAttributesExtensionAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "String":
		fallthrough
	case "Integer":
		fallthrough
	case "Date":
		*e = UserExtensionAttributesExtensionAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserExtensionAttributesExtensionAttributeType: %v", v)
	}
}

type UserExtensionAttributesExtensionAttribute struct {
	ID    *int64                                         `json:"id,omitempty"`
	Name  *string                                        `json:"name,omitempty"`
	Type  *UserExtensionAttributesExtensionAttributeType `json:"type,omitempty"`
	Value *string                                        `json:"value,omitempty"`
}

type UserExtensionAttributes1 struct {
	ExtensionAttribute *UserExtensionAttributesExtensionAttribute `json:"extension_attribute,omitempty"`
}

type UserLdapServer struct {
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type UserLinksComputers struct {
	Computer *IDName `json:"computer,omitempty"`
}

type UserLinksMobileDevices struct {
	MobileDevice *IDName `json:"mobile_device,omitempty"`
}

type UserLinksPeripherals struct {
	Peripheral *IDName `json:"peripheral,omitempty"`
}

type UserLinksVppAssignments struct {
	VppAssignment *IDName `json:"vpp_assignment,omitempty"`
}

type UserLinks struct {
	Computers         *UserLinksComputers      `json:"computers,omitempty"`
	MobileDevices     *UserLinksMobileDevices  `json:"mobile_devices,omitempty"`
	Peripherals       *UserLinksPeripherals    `json:"peripherals,omitempty"`
	TotalVppCodeCount *int64                   `json:"total_vpp_code_count,omitempty"`
	VppAssignments    *UserLinksVppAssignments `json:"vpp_assignments,omitempty"`
}

type UserSites struct {
	Site *SiteObject `json:"site,omitempty"`
}

// User - OK
type User struct {
	CustomPhotoURL       *string                    `json:"custom_photo_url,omitempty"`
	Email                *string                    `json:"email,omitempty"`
	EmailAddress         *string                    `json:"email_address,omitempty"`
	EnableCustomPhotoURL *bool                      `json:"enable_custom_photo_url,omitempty"`
	ExtensionAttributes  []UserExtensionAttributes1 `json:"extension_attributes,omitempty"`
	FullName             *string                    `json:"full_name,omitempty"`
	ID                   *int64                     `json:"id,omitempty"`
	LdapServer           *UserLdapServer            `json:"ldap_server,omitempty"`
	Links                *UserLinks                 `json:"links,omitempty"`
	// Name of the user
	Name        string      `json:"name"`
	PhoneNumber *string     `json:"phone_number,omitempty"`
	Position    *string     `json:"position,omitempty"`
	Sites       []UserSites `json:"sites,omitempty"`
}
