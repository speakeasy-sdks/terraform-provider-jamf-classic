// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SavedSearchesSavedSearchType string

const (
	SavedSearchesSavedSearchTypeComputers     SavedSearchesSavedSearchType = "Computers"
	SavedSearchesSavedSearchTypeMobileDevices SavedSearchesSavedSearchType = "Mobile Devices"
	SavedSearchesSavedSearchTypeUsers         SavedSearchesSavedSearchType = "Users"
)

func (e SavedSearchesSavedSearchType) ToPointer() *SavedSearchesSavedSearchType {
	return &e
}

func (e *SavedSearchesSavedSearchType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Computers":
		fallthrough
	case "Mobile Devices":
		fallthrough
	case "Users":
		*e = SavedSearchesSavedSearchType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SavedSearchesSavedSearchType: %v", v)
	}
}

type SavedSearchesSavedSearch struct {
	ID   *int64                        `json:"id,omitempty"`
	Name *string                       `json:"name,omitempty"`
	Type *SavedSearchesSavedSearchType `json:"type,omitempty"`
}

type SavedSearches struct {
	SavedSearch *SavedSearchesSavedSearch `json:"saved_search,omitempty"`
	Size        *int64                    `json:"size,omitempty"`
}
