// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PatchPolicyGeneralDistributionMethod string

const (
	PatchPolicyGeneralDistributionMethodSelfservice PatchPolicyGeneralDistributionMethod = "selfservice"
	PatchPolicyGeneralDistributionMethodPrompt      PatchPolicyGeneralDistributionMethod = "prompt"
)

func (e PatchPolicyGeneralDistributionMethod) ToPointer() *PatchPolicyGeneralDistributionMethod {
	return &e
}

func (e *PatchPolicyGeneralDistributionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "selfservice":
		fallthrough
	case "prompt":
		*e = PatchPolicyGeneralDistributionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchPolicyGeneralDistributionMethod: %v", v)
	}
}

type PatchPolicyGeneralKillAppsKillApp struct {
	KillAppBundleID *string `json:"kill_app_bundle_id,omitempty"`
	KillAppName     *string `json:"kill_app_name,omitempty"`
}

type PatchPolicyGeneralKillApps struct {
	KillApp *PatchPolicyGeneralKillAppsKillApp `json:"kill_app,omitempty"`
}

type PatchPolicyGeneral struct {
	AllowDowngrade     *bool                                 `json:"allow_downgrade,omitempty"`
	DistributionMethod *PatchPolicyGeneralDistributionMethod `json:"distribution_method,omitempty"`
	Enabled            *bool                                 `json:"enabled,omitempty"`
	ID                 *int64                                `json:"id,omitempty"`
	IncrementalUpdates *bool                                 `json:"incremental_updates,omitempty"`
	KillApps           []PatchPolicyGeneralKillApps          `json:"kill_apps,omitempty"`
	MinimumOs          *string                               `json:"minimum_os,omitempty"`
	Name               string                                `json:"name"`
	// Set to true to patch versions unidentified by Jamf Pro patch reporting
	PatchUnknown  *bool  `json:"patch_unknown,omitempty"`
	Reboot        *bool  `json:"reboot,omitempty"`
	ReleaseDate   *int64 `json:"release_date,omitempty"`
	TargetVersion string `json:"target_version"`
}

type PatchPolicyScopeBuildings struct {
	Building *IDName `json:"building,omitempty"`
}

type PatchPolicyScopeComputerGroups struct {
	ComputerGroup *IDName `json:"computer_group,omitempty"`
}

type PatchPolicyScopeComputersComputer struct {
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Udid *string `json:"udid,omitempty"`
}

type PatchPolicyScopeComputers struct {
	Computer *PatchPolicyScopeComputersComputer `json:"computer,omitempty"`
}

type PatchPolicyScopeDepartments struct {
	Department *IDName `json:"department,omitempty"`
}

type PatchPolicyScopeExclusionsBuildings struct {
	Building *IDName `json:"building,omitempty"`
}

type PatchPolicyScopeExclusionsComputerGroups struct {
	ComputerGroup *IDName `json:"computer_group,omitempty"`
}

type PatchPolicyScopeExclusionsComputersComputer struct {
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Udid *string `json:"udid,omitempty"`
}

type PatchPolicyScopeExclusionsComputers struct {
	Computer *PatchPolicyScopeExclusionsComputersComputer `json:"computer,omitempty"`
}

type PatchPolicyScopeExclusionsDepartments struct {
	Department *IDName `json:"department,omitempty"`
}

type PatchPolicyScopeExclusionsIbeacons struct {
	Ibeacon *IDName `json:"ibeacon,omitempty"`
}

type PatchPolicyScopeExclusionsNetworkSegments struct {
	NetworkSegment *IDName `json:"network_segment,omitempty"`
}

type PatchPolicyScopeExclusions struct {
	Buildings       []PatchPolicyScopeExclusionsBuildings       `json:"buildings,omitempty"`
	ComputerGroups  []PatchPolicyScopeExclusionsComputerGroups  `json:"computer_groups,omitempty"`
	Computers       []PatchPolicyScopeExclusionsComputers       `json:"computers,omitempty"`
	Departments     []PatchPolicyScopeExclusionsDepartments     `json:"departments,omitempty"`
	Ibeacons        []PatchPolicyScopeExclusionsIbeacons        `json:"ibeacons,omitempty"`
	NetworkSegments []PatchPolicyScopeExclusionsNetworkSegments `json:"network_segments,omitempty"`
}

type PatchPolicyScopeLimitationsIbeacons struct {
	Ibeacon *IDName `json:"ibeacon,omitempty"`
}

type PatchPolicyScopeLimitationsNetworkSegments struct {
	NetworkSegment *IDName `json:"network_segment,omitempty"`
}

type PatchPolicyScopeLimitations struct {
	Ibeacons        []PatchPolicyScopeLimitationsIbeacons        `json:"ibeacons,omitempty"`
	NetworkSegments []PatchPolicyScopeLimitationsNetworkSegments `json:"network_segments,omitempty"`
}

type PatchPolicyScope struct {
	AllComputers   *bool                            `json:"all_computers,omitempty"`
	Buildings      []PatchPolicyScopeBuildings      `json:"buildings,omitempty"`
	ComputerGroups []PatchPolicyScopeComputerGroups `json:"computer_groups,omitempty"`
	Computers      []PatchPolicyScopeComputers      `json:"computers,omitempty"`
	Departments    []PatchPolicyScopeDepartments    `json:"departments,omitempty"`
	Exclusions     *PatchPolicyScopeExclusions      `json:"exclusions,omitempty"`
	Limitations    *PatchPolicyScopeLimitations     `json:"limitations,omitempty"`
}

type PatchPolicyUserInteractionDeadlines struct {
	DeadlineEnabled *bool  `json:"deadline_enabled,omitempty"`
	DeadlinePeriod  *int64 `json:"deadline_period,omitempty"`
}

type PatchPolicyUserInteractionGracePeriod struct {
	// Number of minutes to wait before automatically closing all apps required to be closed for an update
	GracePeriodDuration       *int64  `json:"grace_period_duration,omitempty"`
	Message                   *string `json:"message,omitempty"`
	NotificationCenterSubject *string `json:"notification_center_subject,omitempty"`
}

type PatchPolicyUserInteractionNotificationsNotificationType string

const (
	PatchPolicyUserInteractionNotificationsNotificationTypeSelfService                      PatchPolicyUserInteractionNotificationsNotificationType = "Self Service"
	PatchPolicyUserInteractionNotificationsNotificationTypeSelfServiceAndNotificationCenter PatchPolicyUserInteractionNotificationsNotificationType = "Self Service and Notification Center"
)

func (e PatchPolicyUserInteractionNotificationsNotificationType) ToPointer() *PatchPolicyUserInteractionNotificationsNotificationType {
	return &e
}

func (e *PatchPolicyUserInteractionNotificationsNotificationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Self Service":
		fallthrough
	case "Self Service and Notification Center":
		*e = PatchPolicyUserInteractionNotificationsNotificationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchPolicyUserInteractionNotificationsNotificationType: %v", v)
	}
}

type PatchPolicyUserInteractionNotificationsReminders struct {
	NotificationReminderFrequency *int64 `json:"notification_reminder_frequency,omitempty"`
	NotificationRemindersEnabled  *bool  `json:"notification_reminders_enabled,omitempty"`
}

type PatchPolicyUserInteractionNotifications struct {
	NotificationEnabled *bool                                                    `json:"notification_enabled,omitempty"`
	NotificationMessage *string                                                  `json:"notification_message,omitempty"`
	NotificationSubject *string                                                  `json:"notification_subject,omitempty"`
	NotificationType    *PatchPolicyUserInteractionNotificationsNotificationType `json:"notification_type,omitempty"`
	Reminders           *PatchPolicyUserInteractionNotificationsReminders        `json:"reminders,omitempty"`
}

type PatchPolicyUserInteractionSelfServiceIcon struct {
	Filename *string `json:"filename,omitempty"`
	ID       *int64  `json:"id,omitempty"`
	URI      *string `json:"uri,omitempty"`
}

type PatchPolicyUserInteraction struct {
	Deadlines              *PatchPolicyUserInteractionDeadlines       `json:"deadlines,omitempty"`
	GracePeriod            *PatchPolicyUserInteractionGracePeriod     `json:"grace_period,omitempty"`
	InstallButtonText      *string                                    `json:"install_button_text,omitempty"`
	Notifications          *PatchPolicyUserInteractionNotifications   `json:"notifications,omitempty"`
	SelfServiceDescription *string                                    `json:"self_service_description,omitempty"`
	SelfServiceIcon        *PatchPolicyUserInteractionSelfServiceIcon `json:"self_service_icon,omitempty"`
}

// PatchPolicy - OK
type PatchPolicy struct {
	General                      *PatchPolicyGeneral         `json:"general,omitempty"`
	Scope                        *PatchPolicyScope           `json:"scope,omitempty"`
	SoftwareTitleConfigurationID *int64                      `json:"software_title_configuration_id,omitempty"`
	UserInteraction              *PatchPolicyUserInteraction `json:"user_interaction,omitempty"`
}
