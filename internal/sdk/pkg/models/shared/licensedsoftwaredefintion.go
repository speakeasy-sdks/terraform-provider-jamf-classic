// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LicensedSoftwareDefintionCompareType string

const (
	LicensedSoftwareDefintionCompareTypeLike LicensedSoftwareDefintionCompareType = "like"
	LicensedSoftwareDefintionCompareTypeIs   LicensedSoftwareDefintionCompareType = "is"
)

func (e LicensedSoftwareDefintionCompareType) ToPointer() *LicensedSoftwareDefintionCompareType {
	return &e
}

func (e *LicensedSoftwareDefintionCompareType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "like":
		fallthrough
	case "is":
		*e = LicensedSoftwareDefintionCompareType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LicensedSoftwareDefintionCompareType: %v", v)
	}
}

type LicensedSoftwareDefintion struct {
	CompareType *LicensedSoftwareDefintionCompareType `json:"compare_type,omitempty"`
	Name        *string                               `json:"name,omitempty"`
	Version     *string                               `json:"version,omitempty"`
}
