// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LicensedSoftwareFontDefinitions struct {
	Definition *LicensedSoftwareDefintion `json:"definition,omitempty"`
}

type LicensedSoftwareGeneral struct {
	ExcludeTitlesPurchasedFromAppStore *bool  `json:"exclude_titles_purchased_from_app_store,omitempty"`
	ID                                 *int64 `json:"id,omitempty"`
	// Name of the licensed software
	Name                             string      `json:"name"`
	Notes                            *string     `json:"notes,omitempty"`
	Platform                         *string     `json:"platform,omitempty"`
	Publisher                        *string     `json:"publisher,omitempty"`
	RemoveTitlesFromInventoryReports *bool       `json:"remove_titles_from_inventory_reports,omitempty"`
	SendEmailOnViolation             *bool       `json:"send_email_on_violation,omitempty"`
	Site                             *SiteObject `json:"site,omitempty"`
}

type LicensedSoftwareLicensesLicenseAttachments struct {
	Attachment *Attachment `json:"attachment,omitempty"`
}

type LicensedSoftwareLicensesLicenseLicenseType string

const (
	LicensedSoftwareLicensesLicenseLicenseTypeStandard    LicensedSoftwareLicensesLicenseLicenseType = "Standard"
	LicensedSoftwareLicensesLicenseLicenseTypeConcurrent  LicensedSoftwareLicensesLicenseLicenseType = "Concurrent"
	LicensedSoftwareLicensesLicenseLicenseTypeSiteLicense LicensedSoftwareLicensesLicenseLicenseType = "Site License"
)

func (e LicensedSoftwareLicensesLicenseLicenseType) ToPointer() *LicensedSoftwareLicensesLicenseLicenseType {
	return &e
}

func (e *LicensedSoftwareLicensesLicenseLicenseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Standard":
		fallthrough
	case "Concurrent":
		fallthrough
	case "Site License":
		*e = LicensedSoftwareLicensesLicenseLicenseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LicensedSoftwareLicensesLicenseLicenseType: %v", v)
	}
}

type LicensedSoftwareLicensesLicensePurchasing struct {
	IsAnnual            *bool   `json:"is_annual,omitempty"`
	IsPerpetual         *bool   `json:"is_perpetual,omitempty"`
	LicenseExpires      *string `json:"license_expires,omitempty"`
	LicenseExpiresEpoch *int64  `json:"license_expires_epoch,omitempty"`
	LicenseExpiresUtc   *string `json:"license_expires_utc,omitempty"`
	LifeExpectancy      *int64  `json:"life_expectancy,omitempty"`
	PoDate              *string `json:"po_date,omitempty"`
	PoDateEpoch         *int64  `json:"po_date_epoch,omitempty"`
	PoDateUtc           *string `json:"po_date_utc,omitempty"`
	PoNumber            *string `json:"po_number,omitempty"`
	PurchasePrice       *string `json:"purchase_price,omitempty"`
	PurchasingAccount   *string `json:"purchasing_account,omitempty"`
	PurchasingContact   *string `json:"purchasing_contact,omitempty"`
	Vendor              *string `json:"vendor,omitempty"`
}

type LicensedSoftwareLicensesLicense struct {
	Attachments      []LicensedSoftwareLicensesLicenseAttachments `json:"attachments,omitempty"`
	LicenseCount     *int64                                       `json:"license_count,omitempty"`
	LicenseType      *LicensedSoftwareLicensesLicenseLicenseType  `json:"license_type,omitempty"`
	Notes            *string                                      `json:"notes,omitempty"`
	OrganizationName *string                                      `json:"organization_name,omitempty"`
	Purchasing       *LicensedSoftwareLicensesLicensePurchasing   `json:"purchasing,omitempty"`
	RegisteredTo     *string                                      `json:"registered_to,omitempty"`
	SerialNumber1    *string                                      `json:"serial_number_1,omitempty"`
	SerialNumber2    *string                                      `json:"serial_number_2,omitempty"`
}

type LicensedSoftwareLicenses struct {
	License *LicensedSoftwareLicensesLicense `json:"license,omitempty"`
	Size    *int64                           `json:"size,omitempty"`
}

type LicensedSoftwarePluginDefinitions struct {
	Definition *LicensedSoftwareDefintion `json:"definition,omitempty"`
}

type LicensedSoftwareSoftwareDefinitions struct {
	Definition *LicensedSoftwareDefintion `json:"definition,omitempty"`
}

// LicensedSoftware - OK
type LicensedSoftware struct {
	FontDefinitions     []LicensedSoftwareFontDefinitions     `json:"font_definitions,omitempty"`
	General             *LicensedSoftwareGeneral              `json:"general,omitempty"`
	Licenses            []LicensedSoftwareLicenses            `json:"licenses,omitempty"`
	PluginDefinitions   []LicensedSoftwarePluginDefinitions   `json:"plugin_definitions,omitempty"`
	SoftwareDefinitions []LicensedSoftwareSoftwareDefinitions `json:"software_definitions,omitempty"`
}
