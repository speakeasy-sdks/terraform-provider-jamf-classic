// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"jamf/internal/sdk/pkg/models/shared"
	"net/http"
)

// FindComputerManagementBySerialNumberSubsetSubset - Subset to filter by
type FindComputerManagementBySerialNumberSubsetSubset string

const (
	FindComputerManagementBySerialNumberSubsetSubsetGeneral                      FindComputerManagementBySerialNumberSubsetSubset = "General"
	FindComputerManagementBySerialNumberSubsetSubsetPolicies                     FindComputerManagementBySerialNumberSubsetSubset = "Policies"
	FindComputerManagementBySerialNumberSubsetSubsetEbooks                       FindComputerManagementBySerialNumberSubsetSubset = "Ebooks"
	FindComputerManagementBySerialNumberSubsetSubsetMacAppStoreApps              FindComputerManagementBySerialNumberSubsetSubset = "MacAppStoreApps"
	FindComputerManagementBySerialNumberSubsetSubsetOsxConfigurationProfiles     FindComputerManagementBySerialNumberSubsetSubset = "OSXConfigurationProfiles"
	FindComputerManagementBySerialNumberSubsetSubsetManagedPreferenceProfiles    FindComputerManagementBySerialNumberSubsetSubset = "ManagedPreferenceProfiles"
	FindComputerManagementBySerialNumberSubsetSubsetRestrictedSoftware           FindComputerManagementBySerialNumberSubsetSubset = "RestrictedSoftware"
	FindComputerManagementBySerialNumberSubsetSubsetSmartGroups                  FindComputerManagementBySerialNumberSubsetSubset = "SmartGroups"
	FindComputerManagementBySerialNumberSubsetSubsetStaticGroups                 FindComputerManagementBySerialNumberSubsetSubset = "StaticGroups"
	FindComputerManagementBySerialNumberSubsetSubsetPatchReportingSoftwareTitles FindComputerManagementBySerialNumberSubsetSubset = "PatchReportingSoftwareTitles"
)

func (e FindComputerManagementBySerialNumberSubsetSubset) ToPointer() *FindComputerManagementBySerialNumberSubsetSubset {
	return &e
}

func (e *FindComputerManagementBySerialNumberSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "Policies":
		fallthrough
	case "Ebooks":
		fallthrough
	case "MacAppStoreApps":
		fallthrough
	case "OSXConfigurationProfiles":
		fallthrough
	case "ManagedPreferenceProfiles":
		fallthrough
	case "RestrictedSoftware":
		fallthrough
	case "SmartGroups":
		fallthrough
	case "StaticGroups":
		fallthrough
	case "PatchReportingSoftwareTitles":
		*e = FindComputerManagementBySerialNumberSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputerManagementBySerialNumberSubsetSubset: %v", v)
	}
}

type FindComputerManagementBySerialNumberSubsetRequest struct {
	// Computer Serial Number to filter by
	Serialnumber string `pathParam:"style=simple,explode=false,name=serialnumber"`
	// Subset to filter by
	Subset FindComputerManagementBySerialNumberSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
}

type FindComputerManagementBySerialNumberSubsetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	ComputerManagement *shared.ComputerManagement
}
