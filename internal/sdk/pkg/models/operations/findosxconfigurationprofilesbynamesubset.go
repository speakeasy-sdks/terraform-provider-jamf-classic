// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"jamf/internal/sdk/pkg/models/shared"
	"net/http"
)

// FindOsxConfigurationProfilesByNameSubsetSubset - Subset to filter by
type FindOsxConfigurationProfilesByNameSubsetSubset string

const (
	FindOsxConfigurationProfilesByNameSubsetSubsetGeneral     FindOsxConfigurationProfilesByNameSubsetSubset = "General"
	FindOsxConfigurationProfilesByNameSubsetSubsetScope       FindOsxConfigurationProfilesByNameSubsetSubset = "Scope"
	FindOsxConfigurationProfilesByNameSubsetSubsetSelfService FindOsxConfigurationProfilesByNameSubsetSubset = "SelfService"
)

func (e FindOsxConfigurationProfilesByNameSubsetSubset) ToPointer() *FindOsxConfigurationProfilesByNameSubsetSubset {
	return &e
}

func (e *FindOsxConfigurationProfilesByNameSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "Scope":
		fallthrough
	case "SelfService":
		*e = FindOsxConfigurationProfilesByNameSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindOsxConfigurationProfilesByNameSubsetSubset: %v", v)
	}
}

type FindOsxConfigurationProfilesByNameSubsetRequest struct {
	// Name to filter by
	Name string `pathParam:"style=simple,explode=false,name=name"`
	// Subset to filter by
	Subset FindOsxConfigurationProfilesByNameSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
}

type FindOsxConfigurationProfilesByNameSubsetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	OsXConfigurationProfile *shared.OsXConfigurationProfile
}
