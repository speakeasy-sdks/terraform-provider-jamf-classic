// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"jamf/internal/sdk/pkg/models/shared"
	"net/http"
)

// FindComputersByMacAddressSubsetSubset - Subset to filter by
type FindComputersByMacAddressSubsetSubset string

const (
	FindComputersByMacAddressSubsetSubsetGeneral               FindComputersByMacAddressSubsetSubset = "General"
	FindComputersByMacAddressSubsetSubsetLocation              FindComputersByMacAddressSubsetSubset = "Location"
	FindComputersByMacAddressSubsetSubsetPurchasing            FindComputersByMacAddressSubsetSubset = "Purchasing"
	FindComputersByMacAddressSubsetSubsetPeripherals           FindComputersByMacAddressSubsetSubset = "Peripherals"
	FindComputersByMacAddressSubsetSubsetHardware              FindComputersByMacAddressSubsetSubset = "Hardware"
	FindComputersByMacAddressSubsetSubsetCertificates          FindComputersByMacAddressSubsetSubset = "Certificates"
	FindComputersByMacAddressSubsetSubsetSoftware              FindComputersByMacAddressSubsetSubset = "Software"
	FindComputersByMacAddressSubsetSubsetExtensionAttributes   FindComputersByMacAddressSubsetSubset = "ExtensionAttributes"
	FindComputersByMacAddressSubsetSubsetGroupsAccounts        FindComputersByMacAddressSubsetSubset = "GroupsAccounts"
	FindComputersByMacAddressSubsetSubsetIphones               FindComputersByMacAddressSubsetSubset = "iphones"
	FindComputersByMacAddressSubsetSubsetConfigurationProfiles FindComputersByMacAddressSubsetSubset = "ConfigurationProfiles"
)

func (e FindComputersByMacAddressSubsetSubset) ToPointer() *FindComputersByMacAddressSubsetSubset {
	return &e
}

func (e *FindComputersByMacAddressSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "Location":
		fallthrough
	case "Purchasing":
		fallthrough
	case "Peripherals":
		fallthrough
	case "Hardware":
		fallthrough
	case "Certificates":
		fallthrough
	case "Software":
		fallthrough
	case "ExtensionAttributes":
		fallthrough
	case "GroupsAccounts":
		fallthrough
	case "iphones":
		fallthrough
	case "ConfigurationProfiles":
		*e = FindComputersByMacAddressSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputersByMacAddressSubsetSubset: %v", v)
	}
}

type FindComputersByMacAddressSubsetRequest struct {
	// Mac address to filter by
	Macaddress string `pathParam:"style=simple,explode=false,name=macaddress"`
	// Subset to filter by
	Subset FindComputersByMacAddressSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
}

type FindComputersByMacAddressSubsetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	Computer *shared.Computer
}
