// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"jamf/internal/sdk/pkg/models/shared"
	"net/http"
)

// FindComputerManagementByNameUsernameSubsetSubset - Subset to filter by
type FindComputerManagementByNameUsernameSubsetSubset string

const (
	FindComputerManagementByNameUsernameSubsetSubsetGeneral                      FindComputerManagementByNameUsernameSubsetSubset = "General"
	FindComputerManagementByNameUsernameSubsetSubsetPolicies                     FindComputerManagementByNameUsernameSubsetSubset = "Policies"
	FindComputerManagementByNameUsernameSubsetSubsetEbooks                       FindComputerManagementByNameUsernameSubsetSubset = "Ebooks"
	FindComputerManagementByNameUsernameSubsetSubsetMacAppStoreApps              FindComputerManagementByNameUsernameSubsetSubset = "MacAppStoreApps"
	FindComputerManagementByNameUsernameSubsetSubsetOsxConfigurationProfiles     FindComputerManagementByNameUsernameSubsetSubset = "OSXConfigurationProfiles"
	FindComputerManagementByNameUsernameSubsetSubsetManagedPreferenceProfiles    FindComputerManagementByNameUsernameSubsetSubset = "ManagedPreferenceProfiles"
	FindComputerManagementByNameUsernameSubsetSubsetRestrictedSoftware           FindComputerManagementByNameUsernameSubsetSubset = "RestrictedSoftware"
	FindComputerManagementByNameUsernameSubsetSubsetSmartGroups                  FindComputerManagementByNameUsernameSubsetSubset = "SmartGroups"
	FindComputerManagementByNameUsernameSubsetSubsetStaticGroups                 FindComputerManagementByNameUsernameSubsetSubset = "StaticGroups"
	FindComputerManagementByNameUsernameSubsetSubsetPatchReportingSoftwareTitles FindComputerManagementByNameUsernameSubsetSubset = "PatchReportingSoftwareTitles"
)

func (e FindComputerManagementByNameUsernameSubsetSubset) ToPointer() *FindComputerManagementByNameUsernameSubsetSubset {
	return &e
}

func (e *FindComputerManagementByNameUsernameSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "Policies":
		fallthrough
	case "Ebooks":
		fallthrough
	case "MacAppStoreApps":
		fallthrough
	case "OSXConfigurationProfiles":
		fallthrough
	case "ManagedPreferenceProfiles":
		fallthrough
	case "RestrictedSoftware":
		fallthrough
	case "SmartGroups":
		fallthrough
	case "StaticGroups":
		fallthrough
	case "PatchReportingSoftwareTitles":
		*e = FindComputerManagementByNameUsernameSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputerManagementByNameUsernameSubsetSubset: %v", v)
	}
}

type FindComputerManagementByNameUsernameSubsetRequest struct {
	// Computer name to filter by
	Name string `pathParam:"style=simple,explode=false,name=name"`
	// Subset to filter by
	Subset FindComputerManagementByNameUsernameSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
	// Username to filter by
	Username string `pathParam:"style=simple,explode=false,name=username"`
}

type FindComputerManagementByNameUsernameSubsetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	ComputerManagement *shared.ComputerManagement
}
