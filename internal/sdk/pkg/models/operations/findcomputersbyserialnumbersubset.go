// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"jamf/internal/sdk/pkg/models/shared"
	"net/http"
)

// FindComputersBySerialNumberSubsetSubset - Subset to filter by
type FindComputersBySerialNumberSubsetSubset string

const (
	FindComputersBySerialNumberSubsetSubsetGeneral               FindComputersBySerialNumberSubsetSubset = "General"
	FindComputersBySerialNumberSubsetSubsetLocation              FindComputersBySerialNumberSubsetSubset = "Location"
	FindComputersBySerialNumberSubsetSubsetPurchasing            FindComputersBySerialNumberSubsetSubset = "Purchasing"
	FindComputersBySerialNumberSubsetSubsetPeripherals           FindComputersBySerialNumberSubsetSubset = "Peripherals"
	FindComputersBySerialNumberSubsetSubsetHardware              FindComputersBySerialNumberSubsetSubset = "Hardware"
	FindComputersBySerialNumberSubsetSubsetCertificates          FindComputersBySerialNumberSubsetSubset = "Certificates"
	FindComputersBySerialNumberSubsetSubsetSoftware              FindComputersBySerialNumberSubsetSubset = "Software"
	FindComputersBySerialNumberSubsetSubsetExtensionAttributes   FindComputersBySerialNumberSubsetSubset = "ExtensionAttributes"
	FindComputersBySerialNumberSubsetSubsetGroupsAccounts        FindComputersBySerialNumberSubsetSubset = "GroupsAccounts"
	FindComputersBySerialNumberSubsetSubsetIphones               FindComputersBySerialNumberSubsetSubset = "iphones"
	FindComputersBySerialNumberSubsetSubsetConfigurationProfiles FindComputersBySerialNumberSubsetSubset = "ConfigurationProfiles"
)

func (e FindComputersBySerialNumberSubsetSubset) ToPointer() *FindComputersBySerialNumberSubsetSubset {
	return &e
}

func (e *FindComputersBySerialNumberSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "Location":
		fallthrough
	case "Purchasing":
		fallthrough
	case "Peripherals":
		fallthrough
	case "Hardware":
		fallthrough
	case "Certificates":
		fallthrough
	case "Software":
		fallthrough
	case "ExtensionAttributes":
		fallthrough
	case "GroupsAccounts":
		fallthrough
	case "iphones":
		fallthrough
	case "ConfigurationProfiles":
		*e = FindComputersBySerialNumberSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputersBySerialNumberSubsetSubset: %v", v)
	}
}

type FindComputersBySerialNumberSubsetRequest struct {
	// Serial number to filter by
	Serialnumber string `pathParam:"style=simple,explode=false,name=serialnumber"`
	// Subset to filter by
	Subset FindComputersBySerialNumberSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
}

type FindComputersBySerialNumberSubsetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	Computer *shared.Computer
}
