// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"jamf/internal/sdk/pkg/models/shared"
	"net/http"
)

// FindComputerManagementByNameSubsetSubset - Subset to filter by
type FindComputerManagementByNameSubsetSubset string

const (
	FindComputerManagementByNameSubsetSubsetGeneral                      FindComputerManagementByNameSubsetSubset = "General"
	FindComputerManagementByNameSubsetSubsetPolicies                     FindComputerManagementByNameSubsetSubset = "Policies"
	FindComputerManagementByNameSubsetSubsetEbooks                       FindComputerManagementByNameSubsetSubset = "Ebooks"
	FindComputerManagementByNameSubsetSubsetMacAppStoreApps              FindComputerManagementByNameSubsetSubset = "MacAppStoreApps"
	FindComputerManagementByNameSubsetSubsetOsxConfigurationProfiles     FindComputerManagementByNameSubsetSubset = "OSXConfigurationProfiles"
	FindComputerManagementByNameSubsetSubsetManagedPreferenceProfiles    FindComputerManagementByNameSubsetSubset = "ManagedPreferenceProfiles"
	FindComputerManagementByNameSubsetSubsetRestrictedSoftware           FindComputerManagementByNameSubsetSubset = "RestrictedSoftware"
	FindComputerManagementByNameSubsetSubsetSmartGroups                  FindComputerManagementByNameSubsetSubset = "SmartGroups"
	FindComputerManagementByNameSubsetSubsetStaticGroups                 FindComputerManagementByNameSubsetSubset = "StaticGroups"
	FindComputerManagementByNameSubsetSubsetPatchReportingSoftwareTitles FindComputerManagementByNameSubsetSubset = "PatchReportingSoftwareTitles"
)

func (e FindComputerManagementByNameSubsetSubset) ToPointer() *FindComputerManagementByNameSubsetSubset {
	return &e
}

func (e *FindComputerManagementByNameSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "Policies":
		fallthrough
	case "Ebooks":
		fallthrough
	case "MacAppStoreApps":
		fallthrough
	case "OSXConfigurationProfiles":
		fallthrough
	case "ManagedPreferenceProfiles":
		fallthrough
	case "RestrictedSoftware":
		fallthrough
	case "SmartGroups":
		fallthrough
	case "StaticGroups":
		fallthrough
	case "PatchReportingSoftwareTitles":
		*e = FindComputerManagementByNameSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputerManagementByNameSubsetSubset: %v", v)
	}
}

type FindComputerManagementByNameSubsetRequest struct {
	// Computer Name to filter by
	Name string `pathParam:"style=simple,explode=false,name=name"`
	// Subset to filter by
	Subset FindComputerManagementByNameSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
}

type FindComputerManagementByNameSubsetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	ComputerManagement *shared.ComputerManagement
}
