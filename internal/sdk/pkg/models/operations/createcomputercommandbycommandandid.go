// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// CreateComputerCommandByCommandAndIDCommand - Command to send (SettingsEnableBluetooth and SettingsDisableBluetooth require macOS 10.13.4 or later, EnableRemoteDesktop and DisableRemoteDesktop require macOS 10.14.4, ScheduleOSUpdate (deprecated on 2022-10-17) requires macOS 10.12.0 or later)
type CreateComputerCommandByCommandAndIDCommand string

const (
	CreateComputerCommandByCommandAndIDCommandBlankPush                CreateComputerCommandByCommandAndIDCommand = "BlankPush"
	CreateComputerCommandByCommandAndIDCommandEnableRemoteDesktop      CreateComputerCommandByCommandAndIDCommand = "EnableRemoteDesktop"
	CreateComputerCommandByCommandAndIDCommandDisableRemoteDesktop     CreateComputerCommandByCommandAndIDCommand = "DisableRemoteDesktop"
	CreateComputerCommandByCommandAndIDCommandScheduleOsUpdate         CreateComputerCommandByCommandAndIDCommand = "ScheduleOSUpdate"
	CreateComputerCommandByCommandAndIDCommandSettingsEnableBluetooth  CreateComputerCommandByCommandAndIDCommand = "SettingsEnableBluetooth"
	CreateComputerCommandByCommandAndIDCommandSettingsDisableBluetooth CreateComputerCommandByCommandAndIDCommand = "SettingsDisableBluetooth"
	CreateComputerCommandByCommandAndIDCommandUnmanageDevice           CreateComputerCommandByCommandAndIDCommand = "UnmanageDevice"
)

func (e CreateComputerCommandByCommandAndIDCommand) ToPointer() *CreateComputerCommandByCommandAndIDCommand {
	return &e
}

func (e *CreateComputerCommandByCommandAndIDCommand) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BlankPush":
		fallthrough
	case "EnableRemoteDesktop":
		fallthrough
	case "DisableRemoteDesktop":
		fallthrough
	case "ScheduleOSUpdate":
		fallthrough
	case "SettingsEnableBluetooth":
		fallthrough
	case "SettingsDisableBluetooth":
		fallthrough
	case "UnmanageDevice":
		*e = CreateComputerCommandByCommandAndIDCommand(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateComputerCommandByCommandAndIDCommand: %v", v)
	}
}

type CreateComputerCommandByCommandAndIDRequest struct {
	// Command to send (SettingsEnableBluetooth and SettingsDisableBluetooth require macOS 10.13.4 or later, EnableRemoteDesktop and DisableRemoteDesktop require macOS 10.14.4, ScheduleOSUpdate (deprecated on 2022-10-17) requires macOS 10.12.0 or later)
	Command CreateComputerCommandByCommandAndIDCommand `pathParam:"style=simple,explode=false,name=command"`
	// Computer ID - supports comma separated values (e.g. id/8,10,55)
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

type CreateComputerCommandByCommandAndIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
