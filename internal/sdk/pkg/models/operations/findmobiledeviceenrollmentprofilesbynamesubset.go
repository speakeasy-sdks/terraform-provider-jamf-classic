// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"jamf/internal/sdk/pkg/models/shared"
	"net/http"
)

// FindMobileDeviceEnrollmentProfilesByNameSubsetSubset - Subset to filter by
type FindMobileDeviceEnrollmentProfilesByNameSubsetSubset string

const (
	FindMobileDeviceEnrollmentProfilesByNameSubsetSubsetGeneral     FindMobileDeviceEnrollmentProfilesByNameSubsetSubset = "General"
	FindMobileDeviceEnrollmentProfilesByNameSubsetSubsetLocation    FindMobileDeviceEnrollmentProfilesByNameSubsetSubset = "Location"
	FindMobileDeviceEnrollmentProfilesByNameSubsetSubsetPurchasing  FindMobileDeviceEnrollmentProfilesByNameSubsetSubset = "Purchasing"
	FindMobileDeviceEnrollmentProfilesByNameSubsetSubsetAttachments FindMobileDeviceEnrollmentProfilesByNameSubsetSubset = "Attachments"
)

func (e FindMobileDeviceEnrollmentProfilesByNameSubsetSubset) ToPointer() *FindMobileDeviceEnrollmentProfilesByNameSubsetSubset {
	return &e
}

func (e *FindMobileDeviceEnrollmentProfilesByNameSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "Location":
		fallthrough
	case "Purchasing":
		fallthrough
	case "Attachments":
		*e = FindMobileDeviceEnrollmentProfilesByNameSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindMobileDeviceEnrollmentProfilesByNameSubsetSubset: %v", v)
	}
}

type FindMobileDeviceEnrollmentProfilesByNameSubsetRequest struct {
	// Name to filter by
	Name string `pathParam:"style=simple,explode=false,name=name"`
	// Subset to filter by
	Subset FindMobileDeviceEnrollmentProfilesByNameSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
}

type FindMobileDeviceEnrollmentProfilesByNameSubsetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	MobileDeviceEnrollmentProfile *shared.MobileDeviceEnrollmentProfile
}
