// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"jamf/internal/sdk/pkg/models/shared"
	"net/http"
)

// FindComputerManagementByMacAddressSubsetSubset - Subset to filter by
type FindComputerManagementByMacAddressSubsetSubset string

const (
	FindComputerManagementByMacAddressSubsetSubsetGeneral                      FindComputerManagementByMacAddressSubsetSubset = "General"
	FindComputerManagementByMacAddressSubsetSubsetPolicies                     FindComputerManagementByMacAddressSubsetSubset = "Policies"
	FindComputerManagementByMacAddressSubsetSubsetEbooks                       FindComputerManagementByMacAddressSubsetSubset = "Ebooks"
	FindComputerManagementByMacAddressSubsetSubsetMacAppStoreApps              FindComputerManagementByMacAddressSubsetSubset = "MacAppStoreApps"
	FindComputerManagementByMacAddressSubsetSubsetOsxConfigurationProfiles     FindComputerManagementByMacAddressSubsetSubset = "OSXConfigurationProfiles"
	FindComputerManagementByMacAddressSubsetSubsetManagedPreferenceProfiles    FindComputerManagementByMacAddressSubsetSubset = "ManagedPreferenceProfiles"
	FindComputerManagementByMacAddressSubsetSubsetRestrictedSoftware           FindComputerManagementByMacAddressSubsetSubset = "RestrictedSoftware"
	FindComputerManagementByMacAddressSubsetSubsetSmartGroups                  FindComputerManagementByMacAddressSubsetSubset = "SmartGroups"
	FindComputerManagementByMacAddressSubsetSubsetStaticGroups                 FindComputerManagementByMacAddressSubsetSubset = "StaticGroups"
	FindComputerManagementByMacAddressSubsetSubsetPatchReportingSoftwareTitles FindComputerManagementByMacAddressSubsetSubset = "PatchReportingSoftwareTitles"
)

func (e FindComputerManagementByMacAddressSubsetSubset) ToPointer() *FindComputerManagementByMacAddressSubsetSubset {
	return &e
}

func (e *FindComputerManagementByMacAddressSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "Policies":
		fallthrough
	case "Ebooks":
		fallthrough
	case "MacAppStoreApps":
		fallthrough
	case "OSXConfigurationProfiles":
		fallthrough
	case "ManagedPreferenceProfiles":
		fallthrough
	case "RestrictedSoftware":
		fallthrough
	case "SmartGroups":
		fallthrough
	case "StaticGroups":
		fallthrough
	case "PatchReportingSoftwareTitles":
		*e = FindComputerManagementByMacAddressSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputerManagementByMacAddressSubsetSubset: %v", v)
	}
}

type FindComputerManagementByMacAddressSubsetRequest struct {
	// Computer Mac Address to filter by
	Macaddress string `pathParam:"style=simple,explode=false,name=macaddress"`
	// Subset to filter by
	Subset FindComputerManagementByMacAddressSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
}

type FindComputerManagementByMacAddressSubsetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	ComputerManagement *shared.ComputerManagement
}
