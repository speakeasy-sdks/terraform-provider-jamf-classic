// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"jamf/internal/sdk/pkg/models/shared"
	"net/http"
)

// FindMobileDevicesByUDIDSubsetSubset - Subset to filter by
type FindMobileDevicesByUDIDSubsetSubset string

const (
	FindMobileDevicesByUDIDSubsetSubsetGeneral               FindMobileDevicesByUDIDSubsetSubset = "General"
	FindMobileDevicesByUDIDSubsetSubsetLocation              FindMobileDevicesByUDIDSubsetSubset = "Location"
	FindMobileDevicesByUDIDSubsetSubsetPurchasing            FindMobileDevicesByUDIDSubsetSubset = "Purchasing"
	FindMobileDevicesByUDIDSubsetSubsetApplications          FindMobileDevicesByUDIDSubsetSubset = "Applications"
	FindMobileDevicesByUDIDSubsetSubsetSecurity              FindMobileDevicesByUDIDSubsetSubset = "Security"
	FindMobileDevicesByUDIDSubsetSubsetNetwork               FindMobileDevicesByUDIDSubsetSubset = "Network"
	FindMobileDevicesByUDIDSubsetSubsetCertificates          FindMobileDevicesByUDIDSubsetSubset = "Certificates"
	FindMobileDevicesByUDIDSubsetSubsetConfigurationProfiles FindMobileDevicesByUDIDSubsetSubset = "ConfigurationProfiles"
	FindMobileDevicesByUDIDSubsetSubsetProvisioningProfiles  FindMobileDevicesByUDIDSubsetSubset = "ProvisioningProfiles"
	FindMobileDevicesByUDIDSubsetSubsetMobileDeviceGroups    FindMobileDevicesByUDIDSubsetSubset = "MobileDeviceGroups"
	FindMobileDevicesByUDIDSubsetSubsetExtensionAttributes   FindMobileDevicesByUDIDSubsetSubset = "ExtensionAttributes"
)

func (e FindMobileDevicesByUDIDSubsetSubset) ToPointer() *FindMobileDevicesByUDIDSubsetSubset {
	return &e
}

func (e *FindMobileDevicesByUDIDSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "Location":
		fallthrough
	case "Purchasing":
		fallthrough
	case "Applications":
		fallthrough
	case "Security":
		fallthrough
	case "Network":
		fallthrough
	case "Certificates":
		fallthrough
	case "ConfigurationProfiles":
		fallthrough
	case "ProvisioningProfiles":
		fallthrough
	case "MobileDeviceGroups":
		fallthrough
	case "ExtensionAttributes":
		*e = FindMobileDevicesByUDIDSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindMobileDevicesByUDIDSubsetSubset: %v", v)
	}
}

type FindMobileDevicesByUDIDSubsetRequest struct {
	// Subset to filter by
	Subset FindMobileDevicesByUDIDSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
	// UDID to filter by
	Udid string `pathParam:"style=simple,explode=false,name=udid"`
}

type FindMobileDevicesByUDIDSubsetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	MobileDevice *shared.MobileDevice
}
