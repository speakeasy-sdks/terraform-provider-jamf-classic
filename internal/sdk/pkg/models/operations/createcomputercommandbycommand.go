// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// CreateComputerCommandByCommandCommand
type CreateComputerCommandByCommandCommand string

const (
	CreateComputerCommandByCommandCommandBlankPush                CreateComputerCommandByCommandCommand = "BlankPush"
	CreateComputerCommandByCommandCommandDeleteUser               CreateComputerCommandByCommandCommand = "DeleteUser"
	CreateComputerCommandByCommandCommandDeviceLock               CreateComputerCommandByCommandCommand = "DeviceLock"
	CreateComputerCommandByCommandCommandDisableRemoteDesktop     CreateComputerCommandByCommandCommand = "DisableRemoteDesktop"
	CreateComputerCommandByCommandCommandEnableRemoteDesktop      CreateComputerCommandByCommandCommand = "EnableRemoteDesktop"
	CreateComputerCommandByCommandCommandEraseDevice              CreateComputerCommandByCommandCommand = "EraseDevice"
	CreateComputerCommandByCommandCommandScheduleOsUpdate         CreateComputerCommandByCommandCommand = "ScheduleOSUpdate"
	CreateComputerCommandByCommandCommandSettingsDisableBluetooth CreateComputerCommandByCommandCommand = "SettingsDisableBluetooth"
	CreateComputerCommandByCommandCommandSettingsEnableBluetooth  CreateComputerCommandByCommandCommand = "SettingsEnableBluetooth"
	CreateComputerCommandByCommandCommandUnlockUserAccount        CreateComputerCommandByCommandCommand = "UnlockUserAccount"
	CreateComputerCommandByCommandCommandUnmanageDevice           CreateComputerCommandByCommandCommand = "UnmanageDevice"
)

func (e CreateComputerCommandByCommandCommand) ToPointer() *CreateComputerCommandByCommandCommand {
	return &e
}

func (e *CreateComputerCommandByCommandCommand) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BlankPush":
		fallthrough
	case "DeleteUser":
		fallthrough
	case "DeviceLock":
		fallthrough
	case "DisableRemoteDesktop":
		fallthrough
	case "EnableRemoteDesktop":
		fallthrough
	case "EraseDevice":
		fallthrough
	case "ScheduleOSUpdate":
		fallthrough
	case "SettingsDisableBluetooth":
		fallthrough
	case "SettingsEnableBluetooth":
		fallthrough
	case "UnlockUserAccount":
		fallthrough
	case "UnmanageDevice":
		*e = CreateComputerCommandByCommandCommand(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateComputerCommandByCommandCommand: %v", v)
	}
}

type CreateComputerCommandByCommandRequest struct {
	Command CreateComputerCommandByCommandCommand `pathParam:"style=simple,explode=false,name=command"`
}

type CreateComputerCommandByCommandResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
