// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// FindInvitationsByIDSubsetSubset - Subset to filter by
type FindInvitationsByIDSubsetSubset string

const (
	FindInvitationsByIDSubsetSubsetGeneral          FindInvitationsByIDSubsetSubset = "General"
	FindInvitationsByIDSubsetSubsetScope            FindInvitationsByIDSubsetSubset = "Scope"
	FindInvitationsByIDSubsetSubsetInvitationUsages FindInvitationsByIDSubsetSubset = "InvitationUsages"
)

func (e FindInvitationsByIDSubsetSubset) ToPointer() *FindInvitationsByIDSubsetSubset {
	return &e
}

func (e *FindInvitationsByIDSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "Scope":
		fallthrough
	case "InvitationUsages":
		*e = FindInvitationsByIDSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindInvitationsByIDSubsetSubset: %v", v)
	}
}

type FindInvitationsByIDSubsetRequest struct {
	// ID to filter by
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
	// Subset to filter by
	Subset FindInvitationsByIDSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
}

type FindInvitationsByIDSubsetResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
