// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// CreateMobileDeviceCommandURLCommand - Command to send device
type CreateMobileDeviceCommandURLCommand string

const (
	CreateMobileDeviceCommandURLCommandBlankPush                           CreateMobileDeviceCommandURLCommand = "BlankPush"
	CreateMobileDeviceCommandURLCommandClearPasscode                       CreateMobileDeviceCommandURLCommand = "ClearPasscode"
	CreateMobileDeviceCommandURLCommandClearRestrictionsPassword           CreateMobileDeviceCommandURLCommand = "ClearRestrictionsPassword"
	CreateMobileDeviceCommandURLCommandDeviceLocation                      CreateMobileDeviceCommandURLCommand = "DeviceLocation"
	CreateMobileDeviceCommandURLCommandDisableLostMode                     CreateMobileDeviceCommandURLCommand = "DisableLostMode"
	CreateMobileDeviceCommandURLCommandEnableLostMode                      CreateMobileDeviceCommandURLCommand = "EnableLostMode"
	CreateMobileDeviceCommandURLCommandEraseDevice                         CreateMobileDeviceCommandURLCommand = "EraseDevice"
	CreateMobileDeviceCommandURLCommandPasscodeLockGracePeriod             CreateMobileDeviceCommandURLCommand = "PasscodeLockGracePeriod"
	CreateMobileDeviceCommandURLCommandPlayLostModeSound                   CreateMobileDeviceCommandURLCommand = "PlayLostModeSound"
	CreateMobileDeviceCommandURLCommandRestartDevice                       CreateMobileDeviceCommandURLCommand = "RestartDevice"
	CreateMobileDeviceCommandURLCommandSettings                            CreateMobileDeviceCommandURLCommand = "Settings"
	CreateMobileDeviceCommandURLCommandSettingsDisableAppAnalytics         CreateMobileDeviceCommandURLCommand = "SettingsDisableAppAnalytics"
	CreateMobileDeviceCommandURLCommandSettingsDisableBluetooth            CreateMobileDeviceCommandURLCommand = "SettingsDisableBluetooth"
	CreateMobileDeviceCommandURLCommandSettingsEnablePersonalHotspot       CreateMobileDeviceCommandURLCommand = "SettingsEnablePersonalHotspot"
	CreateMobileDeviceCommandURLCommandSettingsDisablePersonalHotspot      CreateMobileDeviceCommandURLCommand = "SettingsDisablePersonalHotspot"
	CreateMobileDeviceCommandURLCommandSettingsDisableDataRoaming          CreateMobileDeviceCommandURLCommand = "SettingsDisableDataRoaming"
	CreateMobileDeviceCommandURLCommandSettingsDisableDiagnosticSubmission CreateMobileDeviceCommandURLCommand = "SettingsDisableDiagnosticSubmission"
	CreateMobileDeviceCommandURLCommandSettingsDisableVoiceRoaming         CreateMobileDeviceCommandURLCommand = "SettingsDisableVoiceRoaming"
	CreateMobileDeviceCommandURLCommandSettingsEnableAppAnalytics          CreateMobileDeviceCommandURLCommand = "SettingsEnableAppAnalytics"
	CreateMobileDeviceCommandURLCommandSettingsEnableBluetooth             CreateMobileDeviceCommandURLCommand = "SettingsEnableBluetooth"
	CreateMobileDeviceCommandURLCommandSettingsEnableDataRoaming           CreateMobileDeviceCommandURLCommand = "SettingsEnableDataRoaming"
	CreateMobileDeviceCommandURLCommandSettingsEnableDiagnosticSubmission  CreateMobileDeviceCommandURLCommand = "SettingsEnableDiagnosticSubmission"
	CreateMobileDeviceCommandURLCommandSettingsEnableVoiceRoaming          CreateMobileDeviceCommandURLCommand = "SettingsEnableVoiceRoaming"
	CreateMobileDeviceCommandURLCommandShutDownDevice                      CreateMobileDeviceCommandURLCommand = "ShutDownDevice"
	CreateMobileDeviceCommandURLCommandUnmanageDevice                      CreateMobileDeviceCommandURLCommand = "UnmanageDevice"
	CreateMobileDeviceCommandURLCommandUpdateInventory                     CreateMobileDeviceCommandURLCommand = "UpdateInventory"
)

func (e CreateMobileDeviceCommandURLCommand) ToPointer() *CreateMobileDeviceCommandURLCommand {
	return &e
}

func (e *CreateMobileDeviceCommandURLCommand) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BlankPush":
		fallthrough
	case "ClearPasscode":
		fallthrough
	case "ClearRestrictionsPassword":
		fallthrough
	case "DeviceLocation":
		fallthrough
	case "DisableLostMode":
		fallthrough
	case "EnableLostMode":
		fallthrough
	case "EraseDevice":
		fallthrough
	case "PasscodeLockGracePeriod":
		fallthrough
	case "PlayLostModeSound":
		fallthrough
	case "RestartDevice":
		fallthrough
	case "Settings":
		fallthrough
	case "SettingsDisableAppAnalytics":
		fallthrough
	case "SettingsDisableBluetooth":
		fallthrough
	case "SettingsEnablePersonalHotspot":
		fallthrough
	case "SettingsDisablePersonalHotspot":
		fallthrough
	case "SettingsDisableDataRoaming":
		fallthrough
	case "SettingsDisableDiagnosticSubmission":
		fallthrough
	case "SettingsDisableVoiceRoaming":
		fallthrough
	case "SettingsEnableAppAnalytics":
		fallthrough
	case "SettingsEnableBluetooth":
		fallthrough
	case "SettingsEnableDataRoaming":
		fallthrough
	case "SettingsEnableDiagnosticSubmission":
		fallthrough
	case "SettingsEnableVoiceRoaming":
		fallthrough
	case "ShutDownDevice":
		fallthrough
	case "UnmanageDevice":
		fallthrough
	case "UpdateInventory":
		*e = CreateMobileDeviceCommandURLCommand(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateMobileDeviceCommandURLCommand: %v", v)
	}
}

type CreateMobileDeviceCommandURLRequest struct {
	// Command to send device
	Command CreateMobileDeviceCommandURLCommand `pathParam:"style=simple,explode=false,name=command"`
	// Mobile device ID values, multiple IDs may be separated by commas (e.g. /id/13,14,15)
	IDList string `pathParam:"style=simple,explode=false,name=id_list"`
}

type CreateMobileDeviceCommandURLResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
