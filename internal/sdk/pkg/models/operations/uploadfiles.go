// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UploadFilesIDType - Name is supported for all but the peripherals resource
type UploadFilesIDType string

const (
	UploadFilesIDTypeID   UploadFilesIDType = "id"
	UploadFilesIDTypeName UploadFilesIDType = "name"
)

func (e UploadFilesIDType) ToPointer() *UploadFilesIDType {
	return &e
}

func (e *UploadFilesIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		fallthrough
	case "name":
		*e = UploadFilesIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadFilesIDType: %v", v)
	}
}

// UploadFilesResource - Resource to attach the file to
type UploadFilesResource string

const (
	UploadFilesResourceComputers                    UploadFilesResource = "computers"
	UploadFilesResourceMobiledevices                UploadFilesResource = "mobiledevices"
	UploadFilesResourceEnrollmentprofiles           UploadFilesResource = "enrollmentprofiles"
	UploadFilesResourcePrinters                     UploadFilesResource = "printers"
	UploadFilesResourcePeripherals                  UploadFilesResource = "peripherals"
	UploadFilesResourcePolicies                     UploadFilesResource = "policies"
	UploadFilesResourceEbooks                       UploadFilesResource = "ebooks"
	UploadFilesResourceMobiledeviceapplicationsicon UploadFilesResource = "mobiledeviceapplicationsicon"
	UploadFilesResourceMobiledeviceapplicationsipa  UploadFilesResource = "mobiledeviceapplicationsipa"
	UploadFilesResourceDiskencryptionconfigurations UploadFilesResource = "diskencryptionconfigurations"
)

func (e UploadFilesResource) ToPointer() *UploadFilesResource {
	return &e
}

func (e *UploadFilesResource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "computers":
		fallthrough
	case "mobiledevices":
		fallthrough
	case "enrollmentprofiles":
		fallthrough
	case "printers":
		fallthrough
	case "peripherals":
		fallthrough
	case "policies":
		fallthrough
	case "ebooks":
		fallthrough
	case "mobiledeviceapplicationsicon":
		fallthrough
	case "mobiledeviceapplicationsipa":
		fallthrough
	case "diskencryptionconfigurations":
		*e = UploadFilesResource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadFilesResource: %v", v)
	}
}

type UploadFilesRequest struct {
	// Uploads the .ipa to Jamf Cloud Distribution Service instead of the Jamf Pro database. Only supported for Jamf Cloud customers and the `mobiledeviceapplicationsipa` resource.
	ForceIpaUpload *bool  `queryParam:"style=form,explode=true,name=FORCE_IPA_UPLOAD"`
	ID             string `pathParam:"style=simple,explode=false,name=id"`
	// Name is supported for all but the peripherals resource
	IDType UploadFilesIDType `pathParam:"style=simple,explode=false,name=idType"`
	// Resource to attach the file to
	Resource UploadFilesResource `pathParam:"style=simple,explode=false,name=resource"`
}

type UploadFilesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
