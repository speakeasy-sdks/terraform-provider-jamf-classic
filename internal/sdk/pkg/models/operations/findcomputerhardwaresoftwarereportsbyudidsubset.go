// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"jamf/internal/sdk/pkg/types"
	"net/http"
)

// FindComputerHardwareSoftwareReportsByUDIDSubsetSubset - Subset to filter by
type FindComputerHardwareSoftwareReportsByUDIDSubsetSubset string

const (
	FindComputerHardwareSoftwareReportsByUDIDSubsetSubsetSoftware FindComputerHardwareSoftwareReportsByUDIDSubsetSubset = "Software"
	FindComputerHardwareSoftwareReportsByUDIDSubsetSubsetHardwre  FindComputerHardwareSoftwareReportsByUDIDSubsetSubset = "Hardwre"
	FindComputerHardwareSoftwareReportsByUDIDSubsetSubsetFonts    FindComputerHardwareSoftwareReportsByUDIDSubsetSubset = "Fonts"
	FindComputerHardwareSoftwareReportsByUDIDSubsetSubsetPlugins  FindComputerHardwareSoftwareReportsByUDIDSubsetSubset = "Plugins"
)

func (e FindComputerHardwareSoftwareReportsByUDIDSubsetSubset) ToPointer() *FindComputerHardwareSoftwareReportsByUDIDSubsetSubset {
	return &e
}

func (e *FindComputerHardwareSoftwareReportsByUDIDSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Software":
		fallthrough
	case "Hardwre":
		fallthrough
	case "Fonts":
		fallthrough
	case "Plugins":
		*e = FindComputerHardwareSoftwareReportsByUDIDSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputerHardwareSoftwareReportsByUDIDSubsetSubset: %v", v)
	}
}

type FindComputerHardwareSoftwareReportsByUDIDSubsetRequest struct {
	// End date (e.g. yyyy-mm-dd)
	EndDate types.Date `pathParam:"style=simple,explode=false,name=end_date"`
	// Start date (e.g. yyyy-mm-dd)
	StartDate types.Date `pathParam:"style=simple,explode=false,name=start_date"`
	// Subset to filter by
	Subset FindComputerHardwareSoftwareReportsByUDIDSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
	// UDID to filter by
	Udid string `pathParam:"style=simple,explode=false,name=udid"`
}

type FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLFontReportType string

const (
	FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLFontReportTypeAdded   FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLFontReportType = "Added"
	FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLFontReportTypeDeleted FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLFontReportType = "Deleted"
)

func (e FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLFontReportType) ToPointer() *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLFontReportType {
	return &e
}

func (e *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLFontReportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Added":
		fallthrough
	case "Deleted":
		*e = FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLFontReportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLFontReportType: %v", v)
	}
}

type FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLFontReport struct {
	DateTime      *string
	DateTimeEpoch *string
	DateTimeUtc   *string
	Name          *string
	Path          *string
	Type          *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLFontReportType
	Version       *string
}

type FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLHardwareReport struct {
	NICSpeed                 *string
	BootPartitionUsedPercent *int64
	CoreCount                *int64
	DateTime                 *string
	DateTimeEpoch            *string
	DateTimeUtc              *string
	Make                     *string
	ModelIdentifier          *string
	OpenRAMSlots             *int64
	OperatingSystem          *string
	OpticalDrive             *string
	ProcessorCount           *int64
	ProcessorSpeedMhz        *int64
	SerialNumber             *string
	ServicePack              *string
	TotalHarddriveSize       *string
	TotalRAMMb               *int64
}

type FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLPluginReportType string

const (
	FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLPluginReportTypeAdded   FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLPluginReportType = "Added"
	FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLPluginReportTypeRemoved FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLPluginReportType = "Removed"
)

func (e FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLPluginReportType) ToPointer() *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLPluginReportType {
	return &e
}

func (e *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLPluginReportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Added":
		fallthrough
	case "Removed":
		*e = FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLPluginReportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLPluginReportType: %v", v)
	}
}

type FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLPluginReport struct {
	DateTime      *string
	DateTimeEpoch *string
	DateTimeUtc   *string
	Name          *string
	Path          *string
	Type          *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLPluginReportType
	Version       *string
}

type FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLSoftwareReportType string

const (
	FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLSoftwareReportTypeAdded   FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLSoftwareReportType = "Added"
	FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLSoftwareReportTypeDeleted FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLSoftwareReportType = "Deleted"
)

func (e FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLSoftwareReportType) ToPointer() *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLSoftwareReportType {
	return &e
}

func (e *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLSoftwareReportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Added":
		fallthrough
	case "Deleted":
		*e = FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLSoftwareReportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLSoftwareReportType: %v", v)
	}
}

type FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLSoftwareReport struct {
	DateTime      *string
	DateTimeEpoch *string
	DateTimeUtc   *string
	Name          *string
	Path          *string
	Type          *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLSoftwareReportType
	Version       *string
}

// FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXML - OK
type FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXML struct {
	FontReport     *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLFontReport
	HardwareReport *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLHardwareReport
	PluginReport   *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLPluginReport
	SoftwareReport *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationXMLSoftwareReport
}

type FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONFontReportType string

const (
	FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONFontReportTypeAdded   FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONFontReportType = "Added"
	FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONFontReportTypeDeleted FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONFontReportType = "Deleted"
)

func (e FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONFontReportType) ToPointer() *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONFontReportType {
	return &e
}

func (e *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONFontReportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Added":
		fallthrough
	case "Deleted":
		*e = FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONFontReportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONFontReportType: %v", v)
	}
}

type FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONFontReport struct {
	DateTime      *string                                                                          `json:"date_time,omitempty"`
	DateTimeEpoch *string                                                                          `json:"date_time_epoch,omitempty"`
	DateTimeUtc   *string                                                                          `json:"date_time_utc,omitempty"`
	Name          *string                                                                          `json:"name,omitempty"`
	Path          *string                                                                          `json:"path,omitempty"`
	Type          *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONFontReportType `json:"type,omitempty"`
	Version       *string                                                                          `json:"version,omitempty"`
}

type FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONHardwareReport struct {
	NICSpeed                 *string `json:"NIC_speed,omitempty"`
	BootPartitionUsedPercent *int64  `json:"boot_partition_used_percent,omitempty"`
	CoreCount                *int64  `json:"core_count,omitempty"`
	DateTime                 *string `json:"date_time,omitempty"`
	DateTimeEpoch            *string `json:"date_time_epoch,omitempty"`
	DateTimeUtc              *string `json:"date_time_utc,omitempty"`
	Make                     *string `json:"make,omitempty"`
	ModelIdentifier          *string `json:"model_identifier,omitempty"`
	OpenRAMSlots             *int64  `json:"open_ram_slots,omitempty"`
	OperatingSystem          *string `json:"operating_system,omitempty"`
	OpticalDrive             *string `json:"optical_drive,omitempty"`
	ProcessorCount           *int64  `json:"processor_count,omitempty"`
	ProcessorSpeedMhz        *int64  `json:"processor_speed_mhz,omitempty"`
	SerialNumber             *string `json:"serial_number,omitempty"`
	ServicePack              *string `json:"service_pack,omitempty"`
	TotalHarddriveSize       *string `json:"total_harddrive_size,omitempty"`
	TotalRAMMb               *int64  `json:"total_ram_mb,omitempty"`
}

type FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONPluginReportType string

const (
	FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONPluginReportTypeAdded   FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONPluginReportType = "Added"
	FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONPluginReportTypeRemoved FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONPluginReportType = "Removed"
)

func (e FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONPluginReportType) ToPointer() *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONPluginReportType {
	return &e
}

func (e *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONPluginReportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Added":
		fallthrough
	case "Removed":
		*e = FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONPluginReportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONPluginReportType: %v", v)
	}
}

type FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONPluginReport struct {
	DateTime      *string                                                                            `json:"date_time,omitempty"`
	DateTimeEpoch *string                                                                            `json:"date_time_epoch,omitempty"`
	DateTimeUtc   *string                                                                            `json:"date_time_utc,omitempty"`
	Name          *string                                                                            `json:"name,omitempty"`
	Path          *string                                                                            `json:"path,omitempty"`
	Type          *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONPluginReportType `json:"type,omitempty"`
	Version       *string                                                                            `json:"version,omitempty"`
}

type FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONSoftwareReportType string

const (
	FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONSoftwareReportTypeAdded   FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONSoftwareReportType = "Added"
	FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONSoftwareReportTypeDeleted FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONSoftwareReportType = "Deleted"
)

func (e FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONSoftwareReportType) ToPointer() *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONSoftwareReportType {
	return &e
}

func (e *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONSoftwareReportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Added":
		fallthrough
	case "Deleted":
		*e = FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONSoftwareReportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONSoftwareReportType: %v", v)
	}
}

type FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONSoftwareReport struct {
	DateTime      *string                                                                              `json:"date_time,omitempty"`
	DateTimeEpoch *string                                                                              `json:"date_time_epoch,omitempty"`
	DateTimeUtc   *string                                                                              `json:"date_time_utc,omitempty"`
	Name          *string                                                                              `json:"name,omitempty"`
	Path          *string                                                                              `json:"path,omitempty"`
	Type          *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONSoftwareReportType `json:"type,omitempty"`
	Version       *string                                                                              `json:"version,omitempty"`
}

// FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSON - OK
type FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSON struct {
	FontReport     *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONFontReport     `json:"font_report,omitempty"`
	HardwareReport *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONHardwareReport `json:"hardware_report,omitempty"`
	PluginReport   *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONPluginReport   `json:"plugin_report,omitempty"`
	SoftwareReport *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONSoftwareReport `json:"software_report,omitempty"`
}

type FindComputerHardwareSoftwareReportsByUDIDSubsetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSONObject *FindComputerHardwareSoftwareReportsByUDIDSubset200ApplicationJSON
}
