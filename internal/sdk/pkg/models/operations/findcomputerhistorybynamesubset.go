// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"jamf/internal/sdk/pkg/models/shared"
	"net/http"
)

// FindComputerHistoryByNameSubsetSubset - Subset to filter by
type FindComputerHistoryByNameSubsetSubset string

const (
	FindComputerHistoryByNameSubsetSubsetGeneral                 FindComputerHistoryByNameSubsetSubset = "General"
	FindComputerHistoryByNameSubsetSubsetComputerUsageLogs       FindComputerHistoryByNameSubsetSubset = "ComputerUsageLogs"
	FindComputerHistoryByNameSubsetSubsetAudits                  FindComputerHistoryByNameSubsetSubset = "Audits"
	FindComputerHistoryByNameSubsetSubsetPolicyLogs              FindComputerHistoryByNameSubsetSubset = "PolicyLogs"
	FindComputerHistoryByNameSubsetSubsetCasperRemoteLogs        FindComputerHistoryByNameSubsetSubset = "CasperRemoteLogs"
	FindComputerHistoryByNameSubsetSubsetScreenSharingLogs       FindComputerHistoryByNameSubsetSubset = "ScreenSharingLogs"
	FindComputerHistoryByNameSubsetSubsetCasperImagingLogs       FindComputerHistoryByNameSubsetSubset = "CasperImagingLogs"
	FindComputerHistoryByNameSubsetSubsetCommands                FindComputerHistoryByNameSubsetSubset = "Commands"
	FindComputerHistoryByNameSubsetSubsetUserLocation            FindComputerHistoryByNameSubsetSubset = "UserLocation"
	FindComputerHistoryByNameSubsetSubsetMacAppStoreApplications FindComputerHistoryByNameSubsetSubset = "MacAppStoreApplications"
)

func (e FindComputerHistoryByNameSubsetSubset) ToPointer() *FindComputerHistoryByNameSubsetSubset {
	return &e
}

func (e *FindComputerHistoryByNameSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "ComputerUsageLogs":
		fallthrough
	case "Audits":
		fallthrough
	case "PolicyLogs":
		fallthrough
	case "CasperRemoteLogs":
		fallthrough
	case "ScreenSharingLogs":
		fallthrough
	case "CasperImagingLogs":
		fallthrough
	case "Commands":
		fallthrough
	case "UserLocation":
		fallthrough
	case "MacAppStoreApplications":
		*e = FindComputerHistoryByNameSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputerHistoryByNameSubsetSubset: %v", v)
	}
}

type FindComputerHistoryByNameSubsetRequest struct {
	// Computer Name to filter by
	Name string `pathParam:"style=simple,explode=false,name=name"`
	// Subset to filter by
	Subset FindComputerHistoryByNameSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
}

type FindComputerHistoryByNameSubsetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	ComputerHistory *shared.ComputerHistory
}
