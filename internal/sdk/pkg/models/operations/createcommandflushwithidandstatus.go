// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// CreateCommandFlushWithIDAndStatusIdtype - Type of device to be flushed
type CreateCommandFlushWithIDAndStatusIdtype string

const (
	CreateCommandFlushWithIDAndStatusIdtypeComputers          CreateCommandFlushWithIDAndStatusIdtype = "computers"
	CreateCommandFlushWithIDAndStatusIdtypeComputergroups     CreateCommandFlushWithIDAndStatusIdtype = "computergroups"
	CreateCommandFlushWithIDAndStatusIdtypeMobiledevices      CreateCommandFlushWithIDAndStatusIdtype = "mobiledevices"
	CreateCommandFlushWithIDAndStatusIdtypeMobiledevicegroups CreateCommandFlushWithIDAndStatusIdtype = "mobiledevicegroups"
)

func (e CreateCommandFlushWithIDAndStatusIdtype) ToPointer() *CreateCommandFlushWithIDAndStatusIdtype {
	return &e
}

func (e *CreateCommandFlushWithIDAndStatusIdtype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "computers":
		fallthrough
	case "computergroups":
		fallthrough
	case "mobiledevices":
		fallthrough
	case "mobiledevicegroups":
		*e = CreateCommandFlushWithIDAndStatusIdtype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCommandFlushWithIDAndStatusIdtype: %v", v)
	}
}

// CreateCommandFlushWithIDAndStatusStatus - Command status to be flushed
type CreateCommandFlushWithIDAndStatusStatus string

const (
	CreateCommandFlushWithIDAndStatusStatusPending           CreateCommandFlushWithIDAndStatusStatus = "Pending"
	CreateCommandFlushWithIDAndStatusStatusFailed            CreateCommandFlushWithIDAndStatusStatus = "Failed"
	CreateCommandFlushWithIDAndStatusStatusPendingPlusFailed CreateCommandFlushWithIDAndStatusStatus = "Pending+Failed"
)

func (e CreateCommandFlushWithIDAndStatusStatus) ToPointer() *CreateCommandFlushWithIDAndStatusStatus {
	return &e
}

func (e *CreateCommandFlushWithIDAndStatusStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Pending":
		fallthrough
	case "Failed":
		fallthrough
	case "Pending+Failed":
		*e = CreateCommandFlushWithIDAndStatusStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCommandFlushWithIDAndStatusStatus: %v", v)
	}
}

type CreateCommandFlushWithIDAndStatusRequest struct {
	// ID of device to be flushed
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
	// Type of device to be flushed
	Idtype CreateCommandFlushWithIDAndStatusIdtype `pathParam:"style=simple,explode=false,name=idtype"`
	// Command status to be flushed
	Status CreateCommandFlushWithIDAndStatusStatus `pathParam:"style=simple,explode=false,name=status"`
}

type CreateCommandFlushWithIDAndStatusResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
