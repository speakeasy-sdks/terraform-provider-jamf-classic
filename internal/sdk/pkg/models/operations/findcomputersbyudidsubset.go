// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"jamf/internal/sdk/pkg/models/shared"
	"net/http"
)

// FindComputersByUDIDSubsetSubset - Subset to filter by
type FindComputersByUDIDSubsetSubset string

const (
	FindComputersByUDIDSubsetSubsetGeneral               FindComputersByUDIDSubsetSubset = "General"
	FindComputersByUDIDSubsetSubsetLocation              FindComputersByUDIDSubsetSubset = "Location"
	FindComputersByUDIDSubsetSubsetPurchasing            FindComputersByUDIDSubsetSubset = "Purchasing"
	FindComputersByUDIDSubsetSubsetPeripherals           FindComputersByUDIDSubsetSubset = "Peripherals"
	FindComputersByUDIDSubsetSubsetHardware              FindComputersByUDIDSubsetSubset = "Hardware"
	FindComputersByUDIDSubsetSubsetCertificates          FindComputersByUDIDSubsetSubset = "Certificates"
	FindComputersByUDIDSubsetSubsetSoftware              FindComputersByUDIDSubsetSubset = "Software"
	FindComputersByUDIDSubsetSubsetExtensionAttributes   FindComputersByUDIDSubsetSubset = "ExtensionAttributes"
	FindComputersByUDIDSubsetSubsetGroupsAccounts        FindComputersByUDIDSubsetSubset = "GroupsAccounts"
	FindComputersByUDIDSubsetSubsetIphones               FindComputersByUDIDSubsetSubset = "iphones"
	FindComputersByUDIDSubsetSubsetConfigurationProfiles FindComputersByUDIDSubsetSubset = "ConfigurationProfiles"
)

func (e FindComputersByUDIDSubsetSubset) ToPointer() *FindComputersByUDIDSubsetSubset {
	return &e
}

func (e *FindComputersByUDIDSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "Location":
		fallthrough
	case "Purchasing":
		fallthrough
	case "Peripherals":
		fallthrough
	case "Hardware":
		fallthrough
	case "Certificates":
		fallthrough
	case "Software":
		fallthrough
	case "ExtensionAttributes":
		fallthrough
	case "GroupsAccounts":
		fallthrough
	case "iphones":
		fallthrough
	case "ConfigurationProfiles":
		*e = FindComputersByUDIDSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputersByUDIDSubsetSubset: %v", v)
	}
}

type FindComputersByUDIDSubsetRequest struct {
	// Subset to filter by
	Subset FindComputersByUDIDSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
	// UDID to filter by
	Udid string `pathParam:"style=simple,explode=false,name=udid"`
}

type FindComputersByUDIDSubsetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	Computer *shared.Computer
}
