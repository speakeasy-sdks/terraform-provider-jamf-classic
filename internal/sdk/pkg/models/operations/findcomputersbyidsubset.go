// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// FindComputersByIDSubsetSubset - Subset to filter by
type FindComputersByIDSubsetSubset string

const (
	FindComputersByIDSubsetSubsetGeneral               FindComputersByIDSubsetSubset = "General"
	FindComputersByIDSubsetSubsetLocation              FindComputersByIDSubsetSubset = "Location"
	FindComputersByIDSubsetSubsetPurchasing            FindComputersByIDSubsetSubset = "Purchasing"
	FindComputersByIDSubsetSubsetPeripherals           FindComputersByIDSubsetSubset = "Peripherals"
	FindComputersByIDSubsetSubsetHardware              FindComputersByIDSubsetSubset = "Hardware"
	FindComputersByIDSubsetSubsetCertificates          FindComputersByIDSubsetSubset = "Certificates"
	FindComputersByIDSubsetSubsetSoftware              FindComputersByIDSubsetSubset = "Software"
	FindComputersByIDSubsetSubsetExtensionAttributes   FindComputersByIDSubsetSubset = "ExtensionAttributes"
	FindComputersByIDSubsetSubsetGroupsAccounts        FindComputersByIDSubsetSubset = "GroupsAccounts"
	FindComputersByIDSubsetSubsetIphones               FindComputersByIDSubsetSubset = "iphones"
	FindComputersByIDSubsetSubsetConfigurationProfiles FindComputersByIDSubsetSubset = "ConfigurationProfiles"
)

func (e FindComputersByIDSubsetSubset) ToPointer() *FindComputersByIDSubsetSubset {
	return &e
}

func (e *FindComputersByIDSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "Location":
		fallthrough
	case "Purchasing":
		fallthrough
	case "Peripherals":
		fallthrough
	case "Hardware":
		fallthrough
	case "Certificates":
		fallthrough
	case "Software":
		fallthrough
	case "ExtensionAttributes":
		fallthrough
	case "GroupsAccounts":
		fallthrough
	case "iphones":
		fallthrough
	case "ConfigurationProfiles":
		*e = FindComputersByIDSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputersByIDSubsetSubset: %v", v)
	}
}

type FindComputersByIDSubsetRequest struct {
	// ID to filter by
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
	// Subset to filter by
	Subset FindComputersByIDSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
}

type FindComputersByIDSubsetResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
