// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"jamf/internal/sdk/pkg/models/shared"
	"net/http"
)

// FindMobileDevicesByMacAddressSubsetSubset - Subset to filter by
type FindMobileDevicesByMacAddressSubsetSubset string

const (
	FindMobileDevicesByMacAddressSubsetSubsetGeneral               FindMobileDevicesByMacAddressSubsetSubset = "General"
	FindMobileDevicesByMacAddressSubsetSubsetLocation              FindMobileDevicesByMacAddressSubsetSubset = "Location"
	FindMobileDevicesByMacAddressSubsetSubsetPurchasing            FindMobileDevicesByMacAddressSubsetSubset = "Purchasing"
	FindMobileDevicesByMacAddressSubsetSubsetApplications          FindMobileDevicesByMacAddressSubsetSubset = "Applications"
	FindMobileDevicesByMacAddressSubsetSubsetSecurity              FindMobileDevicesByMacAddressSubsetSubset = "Security"
	FindMobileDevicesByMacAddressSubsetSubsetNetwork               FindMobileDevicesByMacAddressSubsetSubset = "Network"
	FindMobileDevicesByMacAddressSubsetSubsetCertificates          FindMobileDevicesByMacAddressSubsetSubset = "Certificates"
	FindMobileDevicesByMacAddressSubsetSubsetConfigurationProfiles FindMobileDevicesByMacAddressSubsetSubset = "ConfigurationProfiles"
	FindMobileDevicesByMacAddressSubsetSubsetProvisioningProfiles  FindMobileDevicesByMacAddressSubsetSubset = "ProvisioningProfiles"
	FindMobileDevicesByMacAddressSubsetSubsetMobileDeviceGroups    FindMobileDevicesByMacAddressSubsetSubset = "MobileDeviceGroups"
	FindMobileDevicesByMacAddressSubsetSubsetExtensionAttributes   FindMobileDevicesByMacAddressSubsetSubset = "ExtensionAttributes"
)

func (e FindMobileDevicesByMacAddressSubsetSubset) ToPointer() *FindMobileDevicesByMacAddressSubsetSubset {
	return &e
}

func (e *FindMobileDevicesByMacAddressSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "Location":
		fallthrough
	case "Purchasing":
		fallthrough
	case "Applications":
		fallthrough
	case "Security":
		fallthrough
	case "Network":
		fallthrough
	case "Certificates":
		fallthrough
	case "ConfigurationProfiles":
		fallthrough
	case "ProvisioningProfiles":
		fallthrough
	case "MobileDeviceGroups":
		fallthrough
	case "ExtensionAttributes":
		*e = FindMobileDevicesByMacAddressSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindMobileDevicesByMacAddressSubsetSubset: %v", v)
	}
}

type FindMobileDevicesByMacAddressSubsetRequest struct {
	// Mac address to filter by
	Macaddress string `pathParam:"style=simple,explode=false,name=macaddress"`
	// Subset to filter by
	Subset FindMobileDevicesByMacAddressSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
}

type FindMobileDevicesByMacAddressSubsetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	MobileDevice *shared.MobileDevice
}
