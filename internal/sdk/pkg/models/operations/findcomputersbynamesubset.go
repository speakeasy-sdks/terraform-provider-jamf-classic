// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"jamf/internal/sdk/pkg/models/shared"
	"net/http"
)

// FindComputersByNameSubsetSubset - Subset to filter by
type FindComputersByNameSubsetSubset string

const (
	FindComputersByNameSubsetSubsetGeneral               FindComputersByNameSubsetSubset = "General"
	FindComputersByNameSubsetSubsetLocation              FindComputersByNameSubsetSubset = "Location"
	FindComputersByNameSubsetSubsetPurchasing            FindComputersByNameSubsetSubset = "Purchasing"
	FindComputersByNameSubsetSubsetPeripherals           FindComputersByNameSubsetSubset = "Peripherals"
	FindComputersByNameSubsetSubsetHardware              FindComputersByNameSubsetSubset = "Hardware"
	FindComputersByNameSubsetSubsetCertificates          FindComputersByNameSubsetSubset = "Certificates"
	FindComputersByNameSubsetSubsetSoftware              FindComputersByNameSubsetSubset = "Software"
	FindComputersByNameSubsetSubsetExtensionAttributes   FindComputersByNameSubsetSubset = "ExtensionAttributes"
	FindComputersByNameSubsetSubsetGroupsAccounts        FindComputersByNameSubsetSubset = "GroupsAccounts"
	FindComputersByNameSubsetSubsetIphones               FindComputersByNameSubsetSubset = "iphones"
	FindComputersByNameSubsetSubsetConfigurationProfiles FindComputersByNameSubsetSubset = "ConfigurationProfiles"
)

func (e FindComputersByNameSubsetSubset) ToPointer() *FindComputersByNameSubsetSubset {
	return &e
}

func (e *FindComputersByNameSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "Location":
		fallthrough
	case "Purchasing":
		fallthrough
	case "Peripherals":
		fallthrough
	case "Hardware":
		fallthrough
	case "Certificates":
		fallthrough
	case "Software":
		fallthrough
	case "ExtensionAttributes":
		fallthrough
	case "GroupsAccounts":
		fallthrough
	case "iphones":
		fallthrough
	case "ConfigurationProfiles":
		*e = FindComputersByNameSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputersByNameSubsetSubset: %v", v)
	}
}

type FindComputersByNameSubsetRequest struct {
	// Name to filter by
	Name string `pathParam:"style=simple,explode=false,name=name"`
	// Subset to filter by
	Subset FindComputersByNameSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
}

type FindComputersByNameSubsetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	Computer *shared.Computer
}
