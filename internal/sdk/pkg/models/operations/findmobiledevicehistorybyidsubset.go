// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// FindMobileDeviceHistoryByIDSubsetSubset - Subset to filter by
type FindMobileDeviceHistoryByIDSubsetSubset string

const (
	FindMobileDeviceHistoryByIDSubsetSubsetGeneral            FindMobileDeviceHistoryByIDSubsetSubset = "General"
	FindMobileDeviceHistoryByIDSubsetSubsetManagementCommands FindMobileDeviceHistoryByIDSubsetSubset = "ManagementCommands"
	FindMobileDeviceHistoryByIDSubsetSubsetUserLocation       FindMobileDeviceHistoryByIDSubsetSubset = "UserLocation"
	FindMobileDeviceHistoryByIDSubsetSubsetAudits             FindMobileDeviceHistoryByIDSubsetSubset = "Audits"
	FindMobileDeviceHistoryByIDSubsetSubsetApplications       FindMobileDeviceHistoryByIDSubsetSubset = "Applications"
	FindMobileDeviceHistoryByIDSubsetSubsetEbooks             FindMobileDeviceHistoryByIDSubsetSubset = "Ebooks"
)

func (e FindMobileDeviceHistoryByIDSubsetSubset) ToPointer() *FindMobileDeviceHistoryByIDSubsetSubset {
	return &e
}

func (e *FindMobileDeviceHistoryByIDSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "ManagementCommands":
		fallthrough
	case "UserLocation":
		fallthrough
	case "Audits":
		fallthrough
	case "Applications":
		fallthrough
	case "Ebooks":
		*e = FindMobileDeviceHistoryByIDSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindMobileDeviceHistoryByIDSubsetSubset: %v", v)
	}
}

type FindMobileDeviceHistoryByIDSubsetRequest struct {
	// ID to filter by
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
	// Subset to filter by
	Subset FindMobileDeviceHistoryByIDSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
}

type FindMobileDeviceHistoryByIDSubsetResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
