// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"jamf/internal/sdk/pkg/models/shared"
	"net/http"
)

// FindComputerManagementByIDSubsetSubset - Subset to filter by
type FindComputerManagementByIDSubsetSubset string

const (
	FindComputerManagementByIDSubsetSubsetGeneral                      FindComputerManagementByIDSubsetSubset = "General"
	FindComputerManagementByIDSubsetSubsetPolicies                     FindComputerManagementByIDSubsetSubset = "Policies"
	FindComputerManagementByIDSubsetSubsetEbooks                       FindComputerManagementByIDSubsetSubset = "Ebooks"
	FindComputerManagementByIDSubsetSubsetMacAppStoreApps              FindComputerManagementByIDSubsetSubset = "MacAppStoreApps"
	FindComputerManagementByIDSubsetSubsetOsxConfigurationProfiles     FindComputerManagementByIDSubsetSubset = "OSXConfigurationProfiles"
	FindComputerManagementByIDSubsetSubsetManagedPreferenceProfiles    FindComputerManagementByIDSubsetSubset = "ManagedPreferenceProfiles"
	FindComputerManagementByIDSubsetSubsetRestrictedSoftware           FindComputerManagementByIDSubsetSubset = "RestrictedSoftware"
	FindComputerManagementByIDSubsetSubsetSmartGroups                  FindComputerManagementByIDSubsetSubset = "SmartGroups"
	FindComputerManagementByIDSubsetSubsetStaticGroups                 FindComputerManagementByIDSubsetSubset = "StaticGroups"
	FindComputerManagementByIDSubsetSubsetPatchReportingSoftwareTitles FindComputerManagementByIDSubsetSubset = "PatchReportingSoftwareTitles"
)

func (e FindComputerManagementByIDSubsetSubset) ToPointer() *FindComputerManagementByIDSubsetSubset {
	return &e
}

func (e *FindComputerManagementByIDSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "Policies":
		fallthrough
	case "Ebooks":
		fallthrough
	case "MacAppStoreApps":
		fallthrough
	case "OSXConfigurationProfiles":
		fallthrough
	case "ManagedPreferenceProfiles":
		fallthrough
	case "RestrictedSoftware":
		fallthrough
	case "SmartGroups":
		fallthrough
	case "StaticGroups":
		fallthrough
	case "PatchReportingSoftwareTitles":
		*e = FindComputerManagementByIDSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindComputerManagementByIDSubsetSubset: %v", v)
	}
}

type FindComputerManagementByIDSubsetRequest struct {
	// Computer ID value to filter by
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
	// Subset to filter by
	Subset FindComputerManagementByIDSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
}

type FindComputerManagementByIDSubsetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	ComputerManagement *shared.ComputerManagement
}
