// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"jamf/internal/sdk/pkg/models/shared"
	"net/http"
)

// FindPoliciesByNameSubsetSubset - Subset to filter by
type FindPoliciesByNameSubsetSubset string

const (
	FindPoliciesByNameSubsetSubsetGeneral              FindPoliciesByNameSubsetSubset = "General"
	FindPoliciesByNameSubsetSubsetScope                FindPoliciesByNameSubsetSubset = "Scope"
	FindPoliciesByNameSubsetSubsetSelfService          FindPoliciesByNameSubsetSubset = "SelfService"
	FindPoliciesByNameSubsetSubsetPackageConfiguration FindPoliciesByNameSubsetSubset = "PackageConfiguration"
	FindPoliciesByNameSubsetSubsetScripts              FindPoliciesByNameSubsetSubset = "Scripts"
	FindPoliciesByNameSubsetSubsetPrinters             FindPoliciesByNameSubsetSubset = "Printers"
	FindPoliciesByNameSubsetSubsetDockItems            FindPoliciesByNameSubsetSubset = "DockItems"
	FindPoliciesByNameSubsetSubsetAccountMaintenance   FindPoliciesByNameSubsetSubset = "AccountMaintenance"
	FindPoliciesByNameSubsetSubsetReboot               FindPoliciesByNameSubsetSubset = "Reboot"
	FindPoliciesByNameSubsetSubsetMaintenance          FindPoliciesByNameSubsetSubset = "Maintenance"
	FindPoliciesByNameSubsetSubsetFilesProcesses       FindPoliciesByNameSubsetSubset = "FilesProcesses"
	FindPoliciesByNameSubsetSubsetUserInteraction      FindPoliciesByNameSubsetSubset = "UserInteraction"
	FindPoliciesByNameSubsetSubsetDiskEncryption       FindPoliciesByNameSubsetSubset = "DiskEncryption"
)

func (e FindPoliciesByNameSubsetSubset) ToPointer() *FindPoliciesByNameSubsetSubset {
	return &e
}

func (e *FindPoliciesByNameSubsetSubset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "Scope":
		fallthrough
	case "SelfService":
		fallthrough
	case "PackageConfiguration":
		fallthrough
	case "Scripts":
		fallthrough
	case "Printers":
		fallthrough
	case "DockItems":
		fallthrough
	case "AccountMaintenance":
		fallthrough
	case "Reboot":
		fallthrough
	case "Maintenance":
		fallthrough
	case "FilesProcesses":
		fallthrough
	case "UserInteraction":
		fallthrough
	case "DiskEncryption":
		*e = FindPoliciesByNameSubsetSubset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindPoliciesByNameSubsetSubset: %v", v)
	}
}

type FindPoliciesByNameSubsetRequest struct {
	// Name to filter by
	Name string `pathParam:"style=simple,explode=false,name=name"`
	// Subset to filter by
	Subset FindPoliciesByNameSubsetSubset `pathParam:"style=simple,explode=false,name=subset"`
}

type FindPoliciesByNameSubsetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	Policy *shared.Policy
}
